Scala is a high level general purpose multi-paradigm programming language
  - Typesafe JVM language [Statically typed language]
  - Functional + Object Oriented Programming (Pure - No concept of primitive data types in scala)
  - The program is converted to byte code and can be executed on JVM
  - sbt an Open source build tool for scala
  - Better for concurrent programming due to immutable Objects
  
Packaging and availability -
  - Extract zip
  - Install MSI
  - Use the modern IDEs
  
Binaries -
  . scalac >> Compiles and converts .scala to .class files
  . scala >> Interpreter to execute the scala program
  
Scala also supports REPL - Read Evaluate Print Loop


Scala type inference mechanism using which compiler can deduce data type from the given expression.
 var sum: Int = 1 and var sum: 1 [represents same]
 
 Scala represents everything as Objects, so the Operators are prepresented as method calls to Objects
   1 + 9 =>>>>  In Scala (1).+(9)
   
   Primary Datatypes -
   Int, Float, Double, String, Unit, Any...
   
   numbers are immutable, the object it is referring to (e.g. an array), is mutable.

 ** <object>.getClass() method we can use to know the type/class of an object

void =======> Unit (Scala)

 object FirstObject {

  def main(args: Array[String]): Unit = {
    	val num = 10
    	val str= "90"
    	val result = str.toInt + num
      println(result.getClass())
     }
}

=====================

  def main(args: Array[String]): Unit = {
    	val str 
      var s1
     }

error: '=' expected but   val s1
error: '=' expected but }

======================

     val id = 1
    	val name = "Jatish"
    	val result = id + name
      println(result.getClass())
      
      // Output - java.lang.String
      
      val result1: Int = id + name
      println(result.getClass())
      
      Runtime Exception
file.scala:6: error: type mismatch;
found : String
required: Int
val result: Int = empid + name
^
===============================

val result = "99".isInstanceOf[String]!="99".isInstanceOf[Int]
    	print(result + " " + result.getClass)
      // Output - true boolean

==========================

val a: Null = null
    println(a.getClass)
    // NullPoointerException
    
=================

var num: Int = 1
    num = "One"
    println(num)
    
  // file.scala:5: error: type mismatch;
  
================

var status: Boolean = _     // here underscore is used to assign a default value to the variable

==============

Arrays:
  val numbers = Array[Int](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 
  
  Arrays have a fixed size which is set at the time of their creation. 
  For dynamic sized array, ArrayBuffer can be used.

var arrayBuf = new ArrayBuffer[Int]
 arrayBuf += 1                         // Appending element
 arrayBuf.append(2, 3, 4)   
 
 
 // Removing duplicate elements from the array using distinct
        val arrDistinct = array.distinct
 // reverse order using reverse method
 val arrRev = array.reverse
 
 val newArr=new Array[Int](3)
        /* Use newArr to store the last three elements  */

=====================================

val myArr = Array(2, 3, 4, 5, 6)
myArr.update(2, 9)  // Update the element value at index 2
  println(myArr.mkString("\n"))
  
  =======================
  var n = 5
for (i <- 1 to 5) {
  while (n != 0) {
    n -= 1;
    for (j <- 5 to 1 by -1) {
      if (j + 5 == 9 && n - 3 == 1)
        println(i, j, n)
    }
  }
}
