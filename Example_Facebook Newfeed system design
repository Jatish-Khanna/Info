Design a news feed for a social networking website, which shows updates from the users in connections

1) What is news feed?
  It is a home timeline service which shows all the updates from users includes, there post, status, photos, video or any shared content
  Any social media system has timeline which shows the updates from it connecting users
  
  
2) Requirements?
  Functional requirements?
    . A news feed systems shows the data from users which have been connected
    . A user is related to multiple other persons, by connecting with them or following them
    . Feed may contains posts, images, videos,
    . It should append new feeds or recent feeds using server sent mechanism or long polling or pull method
    
  Non-Functional requirements?
    . System should be able to generate timeline will low latency
    . A new posts should be broadcasted with low latency to all its connecting users
    
 3) Capacity estimations?
  Assuming a user has 300 friends average and 200 pages to be followed
  
  Traffic estimates?
    We have 300 M daily active users
    Each user fetches it's timeline 5 times a day
    
    300 Million users * 5 times a day = 1.5 Billion request per day or 17500 request per second
    
    
  Storage estimates?
    We want to store 500 latest news feed to quick fetch.
    Each post size is 1Kb. This means we 
      500 new feed per user * 1KB = 500 KB data per user
      
      
    Total active users - 300 M
    300 Million * 500 KB = 150 TB of memory 
    Note: if a server holds 100 Gb then we need 1500 such machines to store the data
    
    
  4) System API?
    getUserFeed(apiDevKey, userId, lastFeedID, count, maxID, exludeReplies) 
    
    Parameters:
api_dev_key (string): 
  The API developer key of a registered account. This can be used to, among other things, throttle users based on their allocated quota.
user_id (number): The ID of the user for whom the system will generate the newsfeed.
lastFeedID (number): Optional; returns results with an ID higher than (that is, more recent than) the specified ID.
count (number): Optional; specifies the number of feed items to try and retrieve, up to a maximum of 200 per distinct request.
max_id (number): Optional; returns results with an ID less than (that is, older than) or equal to the specified ID.
exclude_replies(boolean): Optional; this parameter will prevent replies from appearing in the returned timeline.

Returns: (JSON) Returns a JSON object containing a list of feed items.
    
5) Database design?
  . User
  . Entity
  . FeedItem
  . Media

Relationship tables:
  . UserFollow
  . FeedMedia

  Some observations between these entities

. A user can follow other entities
. User and entities can post the feed items which contains text and other multimedia type
. Each feed item has associated userId or Entity ID that owns the posts


6) High level system design?
  We have two subproblems within this complex requirement?
    A) Feed generation?
      . news feed is generated from the post done by User or Entity (page, group...)
      . So when a system receives request to generate feed for the user, below steps are followed-
      
        . Retrieve all Id's of Users and Entities that particular user follows
        . Retrieve latest and most relevant post from the connecting users
        . Feed these post to the ranking system w.r.t. User
        . return the top 10-20 posts from the ranking system
        . Cache these post from the ranking system
        . Once user request earlier feed from the system, get next paginated post from ranking system for user
        
        Note: In this, a feed is generated once and processed by ranking system. Later on cached to provide it to user
        
    
    B) Feed Publishing?
    Once a user has the timeline generated but a stream of events or new posts to be reflected at users timeline
    . For newer items, server can push the feed to user, 
    . or user can send a pull request once server has notified for new post
    . or A long polling mechanism can help to implement the feature

System design Components?
  A) Web server?
    To maintain connection with the user, to transfer request and services between user and server
  B) Application server?
    . For feed generation
    . Post/or status updates from user
    . For feed publishing
    
  C) Metadata database and cache?
    To store metadata about the user and entity. LRU evition policy to store the websocket information between user and server
  D) Posts database and cahce?
    To store metadata about the post and its content
    
  E) CDN or storage for multimedia type?
    To store all the media type over distributed file system
    
  F) News feed generation service?
    To aggregate, rank and publish news feed for the first time to user
    
  G) Feed notification service?
    To notify once the server has new news feed to fan-out for user
    
    
 7) Detailed system design?
  A) Feed generation?
    The service iterates over all the users and entities connected to users, generates a feed 
    
    Issues?
      . Slow for users with lot of friends, as sorting, merging, ranking post take a long time
      . We generate a timeline when user loads there page, this takes a long time
      . For live updates, can cause high backlogs in notification service
      . When pushing live updates with lot of connetions, it consumes un-necessary resources
      
  B) Offline Feed generation?
    a) FEED Generation: dedicated servers that can continuosly generates feed for the user
    . So a request to generate a Feed or timeline for user, just statically loads all the post generated offline
    . This approach compiles feed async and provide the response once a pull request has been received
    
    A Hashtable can serve-
      Key: User Id
      Value: 
        {
          LinkedHashMap<FeedItems>
          DateTime lastTimeStamp
        }

  
  How many Feed items can be stored in memory?
    Assume, One page has 10 feeds and user doesnot browse more than 10 pages
    In total a count of 100 feeds or in worst 200 feeds to be stored in memory maintained by HashMap
    
  Should we generate News feed for all the users?
    . Lot of users that doesn't login frequently
    . A basic approach would be to have eviction policy on the number of users, i.e. it will remove a list of users that didn't login
    . A smarter solution would be to find a login pattern for the user and generate the news feed accordingly
    
    
  b) Feed Publishing:
    The process of pushing new feeds to users async is called Fan-Out
    *) Fan-out Write: A push analogy
       Once a user or entity has published a post, server push it to all of its followers
       . The advantage is -
        System need not to iterate over each user list
        A long polling method to wait for new feed
        A special case to be handled with the popular connections
      
    
    *) Fan-out-On-Load: A pull analogy
      This modus keeps all the recents feed data in memory
      . A user issues a pull request to server to get latest feeds to be published on hometimeline
      . A pull request can be On demand when user has been notified for available feed 
      
     Note: a times pull request responds users with empty response and waste resource of server 
     
      
    *) Hybrid?
      it is combination of - Fan-Out write and Fan-Out-On-Load 
      . We push data from only the connections with small number of followers may be few hundred
      . Stop pushing post from Hot users with high number of followers
      . For Celebrity or Hot user we can usr Fan-out -On-load 
      . This saves huge number of resources, by not pushing to Millions of followers
      
      
  How many feed items per request from each user?
    Say 20 default or customized number of request for each user
    
  Should be always notify users if new feeds are available?
    We can notify user to pull the latest feed from the service that publish the timeline
    . It can be done in batches or at specific intervals
    
    
    




