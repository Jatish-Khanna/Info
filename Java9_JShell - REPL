
Java 9 has introduces a new CLI - JShell is a command line tool to execute snippets of Java code without writing a complete Java programming

REPL - Read Evaluate - Print Loop 

Starting the JShell - (enter the jshell (jshell --start DEFAULT ) on the command line)

How JShell works?
  Code is parsed and variable type is determined (variable declaration, expressions, methods etc.)
  Code is wrapped inside synthetic methods and classes. 
  Import statements are used as is-
  The code is compiled by Java compiler
  The generated bytecode is executed in a JVM and result is displayed on the console
  
WOndering what all are the imported components when starting default JShell

jshell> /imports
|    import java.io.*
|    import java.math.*
|    import java.net.*
|    import java.nio.file.*
|    import java.util.*
|    import java.util.concurrent.*
|    import java.util.function.*
|    import java.util.prefs.*
|    import java.util.regex.*
|    import java.util.stream.*


Want to import static printXX functions when starting JShell -
  jshell --start DEFAULT --start PRINTING
  
Close JShell - "/exit"

-------------------------------------------

JShell supports the following types of snippets:

  expressions and statements
  import statements
  variables, 
  methods, and 
  class definitions
 
If datatype of every expression need to be displayed with every declaration "/set feedback verbose" command can be used

Note: The statement should be ended with semi-colon (;) except inside the block
  Auto complete feature of commands is available with JShell
  
All the JShell commands have been started with "/" and "/help" can be used to know more about available commands

================================
Most used commands in JShell-
  1. /list - List all the source snippets along with ID's in current jshell or a particular source using its ID or name

      jshell> /list
      
      jshell> 1+1
      $1 ==> 2
      
      jshell> /list
         1 : 1+1

  2. /drop <name or id>: removes a sources with name or ID. Names are given to codes such as variable names, method and classes
       jshell> /drop 1
    |  dropped variable $1

    jshell> /list

  3. /edit <name or id> : to edit the particular command or expression represented by ID
  4. /vars - List all the variables declared in the session
  5. /methods - List all the methods declared in the session
  6. /types - list all the types declared in the session
  7. /imports - list all the imports
  8. /open <file-path>: Load a source from the specified file
  9. /env  [--class-path <path>] [--module-path <path>] [--add-modules <modules>] – 
     Sets class or module path to use compiled classes or modules from
     
  
  10. /save <file path> - Saves the JShell session to a file
  11. /reset – Resets JShell and its session
  12. /history – Displays a history of what has been typed
  13. /exit – Exits JShell
  
  
 In JShell, there is no need to handle checked exceptions. 
 If a snippet throws a checked exception, the stack trace will be shown and JShell will continue. 
 Though if a snippet throwing a checked exception is used inside a method, 
 it will have to be handled or declared to be thrown. 
  
  
  
  
  
  
  
  
  
  
  
  





















....


