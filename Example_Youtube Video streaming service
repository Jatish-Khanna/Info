Let's design a video sharing service like Youtube, where users will be able to upload/view/search videos.

1) Why Youtube?
Youtube is one of the most popular video sharing websites in the world.
 Users of the service can upload, view, share, rate, and report videos as well as add comments on videos.

2) Requirements and Goals of the System

Functional requirements:
  . Users should be able to upload the videos on the server
  . Users should be able to view the videos uploaded
  . Users should be ablt to search the videos
  . Service should be able to track the status of Like/comments/Views
  . Add the comments or view a comments for videos
  
Non-functional requirements:
  . The system should be highly reliable that the uploaded video should not be lost
  . The service should be highly available 
  . The consistency can be eventual, it may take some time to view the uploaded video
  . The buffering of video should be modular and proper without any pauses
  
3) Capacity estimations and constaraints?
  Total number of system users?   2 billion
  Total number of daily active users? 800 Million
  Number of reads per day?  5 per day by single user
  Read:write average? 200 : 1 i.e. per 200 reads, one video is uploaded
  Number of writes per day? 
  
  Average size per file? 1 minute video of size 50 MB
  
  What is total views per second?
  800 M (daily active users) * 5 / 86400 = 46,000 views per second
  
  What is the total number of uploads per day?
    800 M (DAU) * 5 (number of views per user per day) / 200 (read :write ratio) =  230 videos per second
    
  A) Storage estimates?
      Assume every every minute 500 hours of worth video has been uploaded by users
      If average video of 1 minutes takes 50 MB, then total storage of videos per minute is as-
  
      50 MB * (500 * 60 ) minutes = 1500 Gb/minutes = 25Gb/sec
      
      Note: these numbers doesn't include replication and without video compression
      
      
  B) Bandwidth estimates?
   500 hours of videos uploaded each minute takes 10M/sec bandwidth
   
   (500 * 60) * 10 = 300 GB/min = 5 Gb/sec
   
4) System API?
 A) uploadVideo(apiDevKey, videoTitle, videoDescription, []tags, categoryId, defaultLanguage, recordedLocation,videoContents)
  api_dev_key (string): The API developer key of a registered account.
 This will be used to, among other things, throttle users based on their allocated quota.

video_title (string): Title of the video.

vide_description (string): Optional description of the video.

tags (string[]): Optional tags for the video.

category_id (string): Category of the video, e.g. , Film, Song, People, etc.

default_language (string): For example English, Mandarin, Hindi, etc.

recording_details (string): Location where the video was recorded.

video_contents (stream): Video to be uploaded.


Returns: (string)
A successful upload will return HTTP 202 (request accepted), and o
nce the video encoding is completed, the user is notified through email with a link to access the video.
 We can also expose a queryable API to let users know the current status of their uploaded video.


B) searchVideo(apiDevKey, searchQuery, userLocation, pageSize, pageToken)
api_dev_key (string): The API developer key of a registered account of our service.

search_query (string): A string containing the search terms.

user_location (string): Optional location of the user performing the search.

maximum_videos_to_return (number): Maximum number of results returned in one request.

page_token (string): This token will specify a page in the result set that should be returned.


Returns: (JSON)
A JSON containing information about the list of video resources matching the search query.
 Each video resource will have a video title, a thumbnail, a video creation date and how many views it has.


C) streamVideo(apiDevKey, videoId, offset, codec, resolution)

Parameters:
api_dev_key (string): The API developer key of a registered account of our service.

video_id (string): A string to identify the video.

offset (number): We should be able to stream video from any offset, this offset would be a time in seconds from the beginning of the video.
 If we support to play/pause a video from multiple devices, we will need to store the offset on the server.
 This will enable the users to start watching a video on any device from the same point where the left.

codec (string) & resolution(string): We should send the codec and resolution info in the API from the client to support play/pause from multiple devices.
 Imagine if you are watching a video on your TV’s Netflix app, paused it there and start watching it on your phone’s Netflix app.
 In this case, you would need codec and resolution, as both these devices have a different resolution and using a different codec.


Returns: (STREAM)
A media stream (a video chunk) from the given offset.


5) Database design
 


6) High Level design

 A) Processing queue:
  Each uploaded video will be pushed to a processing queue, 
  - it will be de-queue for encoding, storage and generating thumbnails
  
  B) Encoder:
   To encode video into multiple formats
  C) Thumbnail generator:
   To create thumbnails for each video
  
  D) Video and Thumbnanil storage:
    these will be stored in some distributed file system
    
  E) User database:
    to store user related information
  F) Metadata storage:
    It will store data about each video
     like title, file path in the system, uploading user, 
     total views, likes, dislikes, etc. Also, it will be used to store all the video comments.


  











