Runnable interface
Thread class

class TProcess extends Thread {
  @Override
  public void run() {
  
  }
}

class TProcess implements Runnable {

  @Override
  public void run() {
  
  }
}


------------------
Keyword volatile-

  It prevents threads from assuming or reusing the cached value by JVM. 
  In case when threads doesn't modify the value which is externally modified but read by threads.
    A chance where stale or old value can be read by system
    
==================

Thread join method
  - pauses the execution of threads in which it has been called until it completes its execution
  
  Example-
  class TProcess extends Thread {
private int count = 0;
	private int countSync = 0;

	private void incrementCount() {
		count++;
	}

	private synchronized void incrementCountSync() {
		countSync++;
	}

	@Override
	public void run() {

		for (int index = 0; index < 1000; index++) {
			incrementCount();
			incrementCountSync();
		}
	}

	public void increment() {
		TProcess t1 = new TProcess();
		TProcess t2 = new TProcess();

		t1.start();
		t2.start();

		// Unpredicted value - as start immidiatly returned after initiating new thread
		System.out.println("value of count:" + count);

		// Pauses the main thread (the thread from where join has been called)
		// Waits until child completes execution
		try {
			t1.join();
			Thread.sleep(100);
			t2.join();
		} catch (InterruptedException e) {
		}
		// value of count may be = 2000 (because is not synchronized, so there may be
		// Possibility of bugs)
		System.out.println("value of count:" + count);
		// value of count will be = 2000
		System.out.println("value of count:" + countSync);
	}
  }  
  
  Every object has intrinsic lock in Java, which is the basis of synchronized keyword
=============================

What is the issue with above code?
  Example-
  
  class TProcess {
private int count = 0;
	private int count2 = 1000;
	private Object lock1 = new Object();
	private Object lock2 = new Object();

	public static void main(String[] args) {
		TProcess t = new TProcess();
		Thread t1 = new Thread(() -> t.update());
		Thread t2 = new Thread(() -> t.update());

		t1.start();
		t2.start();

		try {
			t1.join();
			t2.join();

		} catch (InterruptedException e) {
		}
		System.out.println("values: count " + t.count);
		System.out.println("values: count2 " + t.count2);
	}

	private void update() {
		for (int index = 0; index < 1000; index++) {
			increment();
			decrement2();
		}
	}

	/**
	 * Below methods does not share the data
	 * So they acquire different lock instead of instrinsic lock
	 * This improves performance and provide proper results
	 */

// Marking method as synchronized will create a single intrinsinc lock for "increment and decrement2" method, 
// These methods does not share any common data so 
// By implementing synchronized - we are creating lock objects for individual methods that imporves the performance

	private void increment() {
		synchronized (lock1) {
			count++;
		}
	}

	private void decrement2() {
		synchronized (lock2) {
			count2--;
		}
	}
  }


=================================

Thread Pools using ExecutorService?
	
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class TProcess implements Runnable {
	int processId;
	TProcess(int processId) {
		this.processId = processId;
	}
	
	 @Override
	 public void run() {
	 	System.out.println("Processing id: "+ processId);
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {}
	 }
	 
	 public static void main(String []args) {
	 	ExecutorService executorService = Executors.newFixedThreadPool(2);
		for(int taskId = 1; taskId <= 5; taskId++) {
			executorService.submit(new TProcess(taskId));
		}
		
		executorService.shutdown();
		System.out.println("All tasks submitted");
		try{
		executorService.awaitTermination(1, TimeUnit.DAYS);
		}catch(InterruptedException e){}
		
		System.out.println("All task completed");
	 }
}
