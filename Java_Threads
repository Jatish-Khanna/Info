Runnable interface
Thread class

class TProcess extends Thread {
  @Override
  public void run() {
  
  }
}

class TProcess implements Runnable {

  @Override
  public void run() {
  
  }
}


------------------
Keyword volatile-

  It prevents threads from assuming or reusing the cached value by JVM. 
  In case when threads doesn't modify the value which is externally modified but read by threads.
    A chance where stale or old value can be read by system
    
==================

Thread join method
  - pauses the execution of threads in which it has been called until it completes its execution
  
  Example-
  class TProcess extends Thread {
private int count = 0;
	private int countSync = 0;

	private void incrementCount() {
		count++;
	}

	private synchronized void incrementCountSync() {
		countSync++;
	}

	@Override
	public void run() {

		for (int index = 0; index < 1000; index++) {
			incrementCount();
			incrementCountSync();
		}
	}

	public void increment() {
		TProcess t1 = new TProcess();
		TProcess t2 = new TProcess();

		t1.start();
		t2.start();

		// Unpredicted value - as start immidiatly returned after initiating new thread
		System.out.println("value of count:" + count);

		// Pauses the main thread (the thread from where join has been called)
		// Waits until child completes execution
		try {
			t1.join();
			Thread.sleep(100);
			t2.join();
		} catch (InterruptedException e) {
		}
		// value of count may be = 2000 (because is not synchronized, so there may be
		// Possibility of bugs)
		System.out.println("value of count:" + count);
		// value of count will be = 2000
		System.out.println("value of count:" + countSync);
	}
  }  
  
  Every object has intrinsic lock in Java, which is the basis of synchronized keyword
=============================

What is the issue with above code?
  Example-
  
  class TProcess {
private int count = 0;
	private int count2 = 1000;
	private Object lock1 = new Object();
	private Object lock2 = new Object();

	public static void main(String[] args) {
		TProcess t = new TProcess();
		Thread t1 = new Thread(() -> t.update());
		Thread t2 = new Thread(() -> t.update());

		t1.start();
		t2.start();

		try {
			t1.join();
			t2.join();

		} catch (InterruptedException e) {
		}
		System.out.println("values: count " + t.count);
		System.out.println("values: count2 " + t.count2);
	}

	private void update() {
		for (int index = 0; index < 1000; index++) {
			increment();
			decrement2();
		}
	}

	/**
	 * Below methods does not share the data
	 * So they acquire different lock instead of instrinsic lock
	 * This improves performance and provide proper results
	 */

// Marking method as synchronized will create a single intrinsinc lock for "increment and decrement2" method, 
// These methods does not share any common data so 
// By implementing synchronized - we are creating lock objects for individual methods that imporves the performance

	private void increment() {
		synchronized (lock1) {
			count++;
		}
	}

	private void decrement2() {
		synchronized (lock2) {
			count2--;
		}
	}
  }


=================================

Thread Pools using ExecutorService?
	
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class TProcess implements Runnable {
	int processId;
	TProcess(int processId) {
		this.processId = processId;
	}
	
	 @Override
	 public void run() {
	 	System.out.println("Processing id: "+ processId);
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {}
	 }
	 
	 public static void main(String []args) {
	 	ExecutorService executorService = Executors.newFixedThreadPool(2);
		for(int taskId = 1; taskId <= 5; taskId++) {
			executorService.submit(new TProcess(taskId));
		}
		
		executorService.shutdown();
		System.out.println("All tasks submitted");
		try{
		executorService.awaitTermination(1, TimeUnit.DAYS);
		}catch(InterruptedException e){}
		
		System.out.println("All task completed");
	 }
}


==================================

What is CountDownLatch and Why?
 A CountDownLatch ensures that task awaits for other threads before it starts
 
 CountDownLatch latch = new CountDownLatch(numberOfThreadsToWaitFor);
 
 Specify the number of threads to wait for before it starts processing

Example-

class TProcess extends Runnable {

	int processId;
	CountDownLatch latch;

	TProcess(int processId, CountDownLatch latch) {
		this.processId = processId;
		this.latch = latch;
	}

	@Override
	public void run() {
		System.out.println("Processing id: " + processId);
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
		}
		
		// Each process down derements the latch to zero
		latch.countDown();
	}

	public static void main(String[] args) {
		ExecutorService executorService = Executors.newFixedThreadPool(2);
		
		// Count down latch specifies number of threads to wait for before it starts/resume execution
		CountDownLatch latch = new CountDownLatch(5);

		for (int taskId = 1; taskId <= 5; taskId++) {
		// Latch has been injected using constructor to task processor
			executorService.submit(new TProcess(taskId, latch));
		}
		try {
		// Latch awating for the count == 0 
			latch.await();
		} catch (InterruptedException e) {
		}
		executorService.shutdown();
		System.out.println("All task completed");
	}
}



==========================

Thread synchronization using BlockingQueue-
import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

class ConsumerExchange {

	// Size of the queue - that define upper bound to store the count of element of
	// type T
	BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);
	Random rndProducer = new Random();
	Random rndConsumer = new Random();

	// Produces new element and puts to ArrayBlockingQueue only when size is smaller than
	// defined during initialization
	private void producer() throws InterruptedException {
		while (true) {
			queue.put(rndProducer.nextInt(100));
		}
	}

	// Chanses to consume thread are 33.33%
	private void consumer() throws InterruptedException {
		while (true) {
			Thread.sleep(100);
			if (rndConsumer.nextInt(10) % 3 == 0) {
				System.out.println("Element: " + queue.take() + " ; Queue size: " + queue.size());
			}
		}
	}

	public static void main(String[] args) throws InterruptedException {
		ConsumerExchange cExchange = new ConsumerExchange();
		Thread t1 = new Thread(() -> {
			try {
				cExchange.producer();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});

		Thread t2 = new Thread(() -> {
			try {
				cExchange.consumer();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});

		t1.start();
		t2.start();

		t1.join();
		t2.join();
	}
}



===================================

wait() -> Causes the current thread to wait untill another thread invokes 
	notify() or notifyAll() method for this Object.
	
	wait() is same as wait(0). 
	
	Note: Thread must acquire Object's monitor.  After calling wait() it releases
	lock on Object's monitor and wait unit notified
	

import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

class ConsumerExchange {

	// Size of the queue - that define upper bound to store the count of element of
	// type T
	BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(10);
	Random rndConsumer = new Random();
	Object lock = new Object();

	private void producer() throws InterruptedException {
		while (true) {
			synchronized (this) {
				System.out.println("Producer Lock acquired");
				// Indefinite wait until lock has been acquired
				Thread.sleep(100);
				wait();
				System.out.println("Producer Lock acquired after waiting");
			}
		}
	}

	private void consumer() throws InterruptedException {
		while (true) {
			synchronized (this) {
				System.out.println("Consumer acquired the lock");
				if (rndConsumer.nextInt(10) % 1 == 0) {
					// It will wait unit the lock has been relinquished
					notify();
				}
				// The synchronized block has not been completed
				Thread.sleep(200);
				// Now the waiting threads will be active
				System.out.println("Consumer relinquished the lock");
			}
		}
	}

	public static void main(String[] args) throws InterruptedException {
		ConsumerExchange cExchange = new ConsumerExchange();
		Thread t1 = new Thread(() -> {
			try {
				cExchange.producer();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});

		Thread t2 = new Thread(() -> {
			try {
				cExchange.consumer();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});

		t1.start();
		t2.start();

		t1.join();
		t2.join();
	}
}



===========================================


Reentrant Lock better than synchronized lock
await == wait
signal == notify
signalAll == notifyAll

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Random;
import java.util.concurrent.locks.Condition;

class ConsumerExchange {

	private int count = 0;
	private Random rnd = new Random();

	// Instead of synchronizing increment method
	// where two threads are sharing resource
	// Updating value will result bugs
	// Advantages over synchronized
	private Lock lock = new ReentrantLock();

	private Condition condition = lock.newCondition();

	private void increment() {
		for (int index = 0; index < 1000; index++) {
			count++;
		}
	}

	public void taskFirst() {
		System.out.println("First Task");
		lock.lock();
		try {
			// condition can be awaited only if lock is acquired
			condition.await();
		} catch (InterruptedException e) {

		}

		// Finally is required in case of exception,
		// any acquired locked should be unlocked
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void taskTwo() {
		System.out.println("Task two");
		lock.lock();
		// condition will notify or signal awaiting threads
		// Other threads must acquire Reentrant lock
		if (rnd.nextInt(10) % 2 == 0) {
			condition.signal();
		}

		// Finally is required in case of exception,
		// any acquired locked should be unlocked
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void finished() {
		System.out.println("Finished execution and value of count: " + count);
	}

	public static void main(String[] args) {
		ConsumerExchange cExchange = new ConsumerExchange();
		try {
			cExchange.update();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void update() throws InterruptedException {
		Thread t1 = new Thread(() -> taskFirst());
		Thread t2 = new Thread(() -> taskTwo());

		t1.start();
		t2.start();

		t1.join();
		t2.join();

		System.out.println("Threads execution has been finished");

		finished();
	}

}
