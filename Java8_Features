The Java SE 8 Features 


Write interfaces with default and static methods

Apply Repeating Annotations

Work with Date/Time API

Develop Functional Interfaces

Apply Lambda Expressions

Work with Streams API

Make use of Optional class

Nashorn JS API

Spliterator

Type	Functional Interface	Abstract Method	Description
Function	Function<T, R>	R apply(T t)	
Function that accepts single argument and produces result  

Predicate	Predicate<T>	boolean test(T t)	Boolean-valued function that takes single argument
Consumer	Consumer<T>	void accept(T t)	Function that accepts single argument but returns no result
Supplier	Supplier<T>	T get()	Function that denotes a supplier of results




Summary of maven targets
Reporting and Tool Plugin
Description
checkstype

It creates a checkstyle report for the project

javadoc

It generates Javadoc report for the project

project-info-reports

It generates standard project reports for project

surefire-report

It generates results report for  unit tests in project

help

It retrieves information about the deployable environment of the project




----------------------------------------------

What are the benefits of multiple features in Java-8
 - Support for functional programmaing by Lamda and streams
 - Ease of high volume data processing by streams
 - Ease of use by getting parameter names by reflection
 - Reusable code with enhanced Collections API
 - Smart Exception handling with Optional
 - Encryption with Base64
 - Nashorn engine support for JS
 
Lambda Expression?
  It is an anonymous function
  The method that doesn't need accessmodifiers, name or return value
  This can be passed as paramter in a method
  Code as data - by passing as function parameter
  
  
Parts of Lambda expression?
  Paramter list (optional)
  Lambda arrow operator (separates listed params and expression body)
  Lambda expression body (the code that will be executed)
  
Lamda expression datatype?
  Lamda expression fullfills the purpose of passing as code
  The datatype of Lamda expression is a functional interface
  It is functional interface
  
- Functional programming
- Big data [With increase in database size]
- Optional [borrowed from Google guava lib, edge cases have been handled properly]
- Cloud computing [Code as data and code can be executed on multiple servers]
  
  
Why lambda expression?
 - Functional programming [One function is running the code of other function]
 - Cloud computing [Method as a param to other method, code as data]
 - Serverless architecture []
 
Why Functional Interfaces?
  - A functional interface that has abstract method
  Runnable, Callable interface
  
SAM - Single Abstract Method
  It has exactly one abstract method
  @FunctionalInterface : It is not mandatory to use [but it will ensure that interface has only SAM]
  

Used in Lamda expressions, method reference or constructor interface
- Code can be considered as data
- Functional has one abstract method, that has been passed as an argument method


 
Collection[Java 1.2] and Stream API[Java 8]:
 Collection is used to store data in different data structure
  Stream is used to apply computation or processing of data
 
 Collection is a finite set of data
 Stream is an infinite number of data
 
 Collection create objects in eager
 Stream initialize objects in lazy way
 
 Collection support iterate and consume multiple time
 Stream consumption is donen only once

Stream API-
 Data in a declarative manner
 Collecting stats on data is easier
 Good use of multi-core architecture - without dealing with thread API
 Pipeline of data operation that can be executed sequentional or in parallel
 Aggregate functions are available on data
 Writing code in funcational manner
 Parallel processing has also been supported by stream API
 

Stream Intermediate and Terminal Operations
  Evaluation - Intermediated operations are only evaluated when terminal operation is executed
  Output - Intermediate operations is another stream wherea Terminal operation provides resultss
  Lazy evaluation - Intermediate in lazy manner whereas Terminal in eager manner
  Multiple operations - Multiple operations are possible is stream which are chained
  Chaining - Chainning of Intermediated is possible
  
 
Spliterator-
 To traverse and partition  elements of source[] in java
 It may traverse elements individually or sequentional in batch
 
Difference b/w Spliterator and Iterator
 Spliterator with Streams
 Iterator with Collections
 
 Spliterator uses internal iterations
 Iterator is external Iterations
 
 Spliterator can be parallel or sequentional
 Iterator can only be in sequentional
 
 Spliterator can traverse elements in bulk or individually
 Iterator can traverse elements in individually
 
 
What is Type Inference ?
 The type of method parameters and its return type has been inferred by Java compiler
 
  Java 7 also supports TypeInference whereas Java8 has enhanced the method to-
    . Lambda expressions
    . Method references
    
 Internal Interation in Java8-
   . Which algorithm controls the iterations is it, Iteration or Collections
    - When a collections controls (External iteration)
    - When an Iterator controls (Internal Iteration)
    
    Internal iterator doesn't store the state of intermediate Collections
    
    
  Difference b/w Internal And External iterator?
   Fucntional programming, Parallel processing, Code readbility, Control is with Iterator, tells what to iterate not how
   
   An Internal iterator controls the iterations itself whereas 
   External iteration has been controlled by collection
   
   An Internal iterator can be individual or in bulk
   External is Individually
   
   Internal can be sequenctional and parallel
   External is sequentional
   
   Internal goes well with functional programming
   External iterator goes well with OOP (imperative style)
   
   Internal iterator code says what to do
   External iterator code says How to iterate
   
   
  Use Cases of Internal Iterator?
   High performance, parallel processing, bulk operations, fast iterations
   
  Disadvantage of Internal Iterator?
   . Limited control on how to do
   . 
   
   
   
PermGen of ClassLoader- 
  It has been removed instead of Metaspace is the new feature
  Intial and Maximum size of metaspace can be customized
  -XX:MetaspaceSize
  -XX:MaxMetaspaceSize
  
  
  Annotations introduces in Java-8?
    @FunctionalInterface -
      Used to mark Interface as SAM functional interface
    @Repeatable
     It is used for marking another annotation, so that this annotation can be applied multiple times



StringJoiner?
  a new class that can construct a String,
  To contruct a String seperated by Delimiter
  It can add a Suffix and Prefix to String
  
  
  Example-
  StringJoiner(Sting delimiter, String prefix, String suffix)
  
  StringJoiner stJoiner = new StringJoiner(":","[","]");
  stJoiner.add("Part-1").add("Part-2").add("Part-3");
  stJoiner.toString(); // [Part-1:Part-2:Part-3]



Difference B/w Interface with Default method and Abstract class?
  Contructor
   Interface cannot have constructor
   Abstract class can have constructor
  
  Instance variable 
    Interface cannot have instance variable
    Abstract class can have instance variables
    
  Concrete method
   Inteface cannot have concrete methods, (default, static methods)
   Abstract class can have conrete methods with implementation
  
  Lamda Use
   SAM interface provision to be used as Lamda expression
   Abstract class cannot be used as Lamda expression
   
   
===========================================
Default Method rules:
  1. All class or super class definition wins over the default implementation
  2. Then it checks for child interface instead of the top interface in the hierarchy
  3. For ambigous implementation of default interface from two different interfaces, then class must implements its own
    and should call explicitly the required extension.
    <INTERFACE_NAME>.super.<METHOD_NAME>();   
   
   
