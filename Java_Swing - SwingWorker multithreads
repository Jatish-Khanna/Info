

SwingWorker is an "abstarct" class for Swing library of Java programming language
It is used to performed GUI interactions tasks in background tasks

This is intentionally developed to handle Huge task to be executed on different threads which doesn't impact the UI

Types of Threads-
  . CurrentThread  - The current running thread or thread where application logic has been executed
  . Event dispatch thread - All event handling code executed on this thread
  . Worker Threads - Also known as Background threads where all the time consuming background tasks are executed
  
  
  SwingWorker schedules the background of tasks on worker threads
  It provides inter-thread communication using Event dispatched threads
  
  Important methods-
  doInBackground() - this is simillar to run in Runnable or Thread and call in Callable interface
   - It provide the logic that gives details what to be executed by a single thread
   
   #1
   protected abstract T doInBackground()
                             throws Exception
      Computes a result, or throws an exception if unable to do so. 
      This method is executed in a background thread.
      Returns:
      the computed result
      Throws:
      Exception - if unable to compute a result
  
  #2
  done(): This function is called when the thread finished its execution. 
  Also, any value returned by the doInBackground() function can be received inside this function using get(). 
  Further, updates can be made to GUI inside this function. 
  Thus, function executes on the Event Dispatch Thread after the doInBackground method is finished.
  
  protected void done()


  #3
  execute(): Schedules this SwingWorker for execution on a worker thread.
  
public final void execute()

  #4
  publish() : This method is to be used 
  from inside the doInBackground method to deliver intermediate results for processing 
  on the Event Dispatch Thread inside the process method.
  
  protected final void publish(V... chunks)


  #5
  process(): Receives data chunks from the publish method asynchronously on the Event Dispatch Thread. 
  Because this method is invoked asynchronously, publish() may have been called multiple times.

  protected void process(List chunks)
  Parameters:
  chunks - intermediate results to process
  
  #6
  setProgress: Sets the progress bound property. The value should be from 0 to 100.
  protected final void setProgress(int progress)

  Example:
  setProgress(1);
  setProgress(2);
  setProgress(3);

  might result in a single PropertyChangeListener 
  notification with the value 3.
  Parameters:
  progress - the progress value to set
  Throws:
  IllegalArgumentException - is value not from 0 to 100
  
  #7
  getProgress: Returns the progress bound property.
  public final int getProgress()
  Returns:
  the progress bound property.
  cancel: Attempts to cancel execution of this task. 
  This attempt will fail if the task has already completed, 
  has already been cancelled, or could not be cancelled for some other reason. 
  If successful, and this task has not started when cancel is called, this task should never run.
  
  #8
  isCancelled: Returns true if this task was cancelled before it completed normally.
public final boolean isCancelled()
Returns:
true if this task was cancelled before it completed

 #9
isDone: Returns true if this task completed. 
Completion may be due to normal termination, an exception, or cancellation â€” 
in all of these cases, this method will return true.
public final boolean isDone()
Returns:
true if this task completed

#10
get: Waits if necessary for the computation to complete, and then retrieves its result.
public final T get()
            throws InterruptedException,
                   ExecutionException
                   
=====================              

It is good to update the GUI in @Ovveride "done" method but doInBackground should not update GUI


SwingWorker<Boolean, Integer> worker = new StringWorker<>() {

  @Override
  protected
}



Example----

import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

class ConsumerExchange {
	public void executeWorker() throws InterruptedException {
		// Here,
		// Boolean defines - the result or return value from doInBackground function
		// Integer defines - intermediate type result returned from doInBackground
		SwingWorker<Boolean, Integer> worker = new SwingWorker<Boolean, Integer>() {

			@Override
			protected Boolean doInBackground() throws InterruptedException {
				System.out.println("Worker-" + Thread.currentThread().getName());
				for (int index = 0; index < 10; index++) {
					// Publish the intermediate results from task
					publish(index);
					Thread.sleep(1000);
				}
				return true;
			}

			@Override
			protected void done() {
				try {
					// get() method access the returned result from doInBackground
					System.out.println(get());
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ExecutionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			// List of chunks defined the values published from doInBackground
			// As this method is not guaranteed to be called or to be called with collected
			// values
			// the reason it accepts a List of values

			@Override
			protected void process(List<Integer> chunks) {
//				System.out.println("Process method called.");
				chunks.stream().forEach(System.out::println);
			}
		};

		System.out.println("Executing worker");
		// Starts the worker and call doInBackground for the worker
		worker.execute();

	}

	public static void main(String[] args) {
		for (int workers = 0; workers < 10; workers++) {
			SwingUtilities.invokeLater(() -> {
				try {
					new ConsumerExchange().executeWorker();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			});
		}
	}
}
