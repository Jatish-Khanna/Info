The multiple request-response cycles between client and server were consuming both time and network bandwidth.
Javascript is sufficing the requirements of Users by handling events and requests at client side

  = Improves the network utilization b/w client and servers
  = Dynamic HTML using Javascript
  = Validate Forms and handle the events at the clientn side
  = To create interactive webpages by manipulating DOM API
  
  JavaScript is an interpreted language. The browser interprets the JavaScript code embedded inside the web page, 
  executes it and displays the output. 
  It is not compiled to any other form to be executed.

Data types in Javascript-
primitives
  . number
  . string
  . boolean
 
  . undefined
  . null 
  
  non-primitive
   . object

boolean -
  true (non-zero number, string, true)
  false(0, -0, "", NaN, undefined, null)

typeof is an operator in JavaScript.
dynamic data binding:
 JavaScript is a loosely-typed language. The type of data assigned to a variable is decided at runtime. 

Deferred mode of Javascript execution-
  1) Javascript functions: These are 
    Userdefined functions
    Builtin functions
    
    
    Syntax of Functions-
      function name(aguments) {
        // Function body
        // return statement
      }
    
    Return value for Javascript function is optional. 
    // Function implictly return "undefined" if no explicit return statement is present

Calling a Javascript function:
   functionName(arguments...);

Example- 
  function sayHello(name) {
    console.log("Hello...!" + name); 
  }
In JavaScript it is perfectly normal to have functions inside functions. 
The function within another function body, is called as nested function or Closures


Note: The nested function is private to the container function and cannot be invoked from outside the container function.

Example:
  function parent(name) {
    var msg = "Hi! I'm parent " + name;
    
    return function (cName) {
      var msgChild = "I'm child of parent:  " + cName + " " + msg;
      return msgChild;
    }
    //return msg;
  }
  
  var add = (function () {
  var counter = 0;
  return function () {counter += 1; return counter}
})(); // Self invoking anonymous parent function

// Calling child function
add();

A closure is a function having access to the parent scope, even after the parent function has closed.

Javascript variable and Scope-
  1) Local variable - Defined inside a function (accessibility is from within the function in which they are defined)
  2) Global variable - Outside the Javascript functions are defined under global scope
  3) Nested variable - Variables defined in function which is nested function or closure

  Example: 
   // global scope - start
     var a = 10;
   // global scope - end
   
   function myFunction() {
     // local scope - start
      ....
      return function() {
        // nested scope of the variables
      }
   }

Note: variables undeclared and used will throw Uncaught ReferenceError.
  declare local variable without the use of keyword 'var', it takes global scope.

when lines of code within the function try accessing a variable declared both locally and globally, 
the local variable will shadow the global variable.


***************Javascript Hoisting**************************
  All but FEW(exception cases will be marked later)  variables and function declarations wherever present in the code 
    moved to TOP and get declared
  - Scope GLOBAL: they are available for all purpose use and moved to top
  - Scope Function/Local - they are available at the TOP of function
  
 Note: Only DECLARATIONS not INITIALIZATIONS are hoisted to the top
 
 Example:1
   Instead of throwing ReferenceError
   
   console.log(variable_1);
   var variable_1;
   
// Output: undefined
 As undefined is the default value

Example:2 
  with Initialization
    
    console.log(variable_1);
    var variable_1 = 'Hi';

// Output: Undefined
 Only declaration is hoisted but initialization. So, the default value is logged as result.
 
 
 ------------------Similarly Function Hoisting
 
   callingMyFunction(); // Here function is not declared and defined
   
   // Output: Uncaught ReferenceError
   
 Example:1
   callingMyFunction();
   
   function callingMyFunction() {
     // Function body ...
     ...
   }
 
 This function declaration will be hoisted to the top
 
 --------------------------------------
 
 JavaScript code is delayed or deferred till some event occurs,
 the execution is called as deferred mode execution. This makes JavaScript an action-oriented language.
 
 Event handlers are associated with DOM elements
 
 ---------------------------------------
 
 Javascript Objects can be created in ways - 
   Object literals  - This is when Object is initialized as JSON either empty or Key/Value pairs
     Example -
       var myCar = { "name" : "Jatish Khanna", 
                       functionKeyName: function(param1) {
                         return "I'm function";
                       }
                   };
   
     The function defined in the Object is Object behaviour whereas other key/value pairs are Object state
   
   Constructor - 
 
 
 Accessing state and Behaniour of Objects:
   1) Using dot operator - 
     Getting state/Behavior -
       console.log(objectName.key);
       
     Setting S/B
       objectName.key = 'value';
       
   2) Using Bracket operator
 
     Getting state/Behavior -
       console.log(objectName["key"]);
       
     Setting S/B
       objectName["key"] = 'value';
       
 
 ---------------------------------------
 
 To create all objects with similar/fixed prototype use Function Constructor-
    Function constructor is like regular functions but it is invoked using 'new' keyword.
 
function Prototype(param1, param2) {
  this.param1 = param1;
  this.param2 = param2;
  // Similar fields for function
  ...
  
  this.method1 = function(param) {
    ...
  }
  // Similar nested methods to Function construtor
  ...
}

this Keyword - It points to an object which owns the code in current context.

Using Function constructor - 
  var myObject = new Prototype(...);
  // Accessing the function properties
  myObject.param1;
  // Calling methods in the function
  myObject.method1(...);

---------------------------

var myDateObject = new Date();

console.log(myDateObject.getYear());
getDay(), getHours(), getMonth(), getTime(), getMilliseconds() and same setter methdos

			document.getElementById('b1').innerHTML="Date: "+dateObject2.getDate();
			document.getElementById('b2').innerHTML="Day: "+dateObject2.getDay();
			document.getElementById('b3').innerHTML="Month: "+dateObject2.getMonth();		
			document.getElementById('b4').innerHTML="Year: "+dateObject2.getFullYear();
			document.getElementById('b5').innerHTML="Hours: "+dateObject2.getHours();
			document.getElementById('b6').innerHTML="Minutes: "+dateObject2.getMinutes();
			document.getElementById('b7').innerHTML="Seconds: "+dateObject2.getSeconds();

--------------------------

Javascript Regular Expressions-

  1) using RegExp constructor
    var pattern = new RegEx("pattern", modifiers);
  
  2) as a literal value by enclosing within forward slash (/)
    var pattern = /"pattern"/modifiers

modifiers -
  g - global match
  m - multi line match
  i - ignore case
  
  pattern.test(string) // to verify if provided string Match the RegEx pattern
  string.search("pattern") or string.replace("pattern", "replacement")
 
--------------------------------

Associative arrays in Javascript-
If index is a string, the array is referred as an associative array. 
These arrays have indexes as keys that store value with any valid JavaScript data type.

var myArray = new Array();
myArray["name"] = "Jatish Khanna";
myArray["Id"] = 1;

-----------------------------------
Dense Arrays

JavaScript arrays are allowed to contain elements of different types. Such an array is called as dense array. 
  var myArray = [10, "Jatish", 11, "Hello"];

to get the length of an Array using -
  myArray.length -> gives number of elements present in the array
  push() Adds new element at last position in an array
  pop() Removes last element from given array
  splice() Adds new elements at specified position in an array
     Syntax: splice(x,y,z)
     x=index for new item
      y=number of items to be removed, starting from index next to index of new item
      z=item to be added


  concat() Joins two or more arrays and returns joined array.
  forEach() Iterates over array to access each indexed element inside an array.
     myArray.forEach( function( currentItem, index){
        console.log(" Array has " + currentItem +" at index: " + index);
      })

--------------------------------------

JSON - Javascript Object Notation a light weight information interchange format over the n/w 
   var myJson = { "cusomterName" : "Jatish", "custId" : 1 ... }
   
   This is similar to the literal notation in the Javascript but there is Key difference:
     Note: For Javascript Objects Keys shouldn't be present in Quotes whereas Json mandataes the keys to be in quotes
     
     The quotes can be single or double quotes
     
     Json :
       { "customerName" : "Jatish" }
       
     JS literal Object
       { cutomerName : "Jatish" }
       
Important functions to map Json and Javascript Objects -
  1) parse()  - that converts string information and parse to Json Object
    JSON.parse("{'customerName' : 'Jatish'}");
    
  2) stringify() - Return JSON string respective to the Object
    JSON.stringify(myJsObject);

      <script>
				        var dataJSON = {
                        "customers":   [
                            {"firstName":"Jatish", "lastName":"Khanna"}
                        ]};
                        
                        
                        document.write('JSON string: '+JSON.stringify(dataJSON)+'<br><br>');

                        var stringJSON = '{"firstName":"Jatish", "lastName":"Khanna"}';
                        var parsedJson = JSON.parse(stringJSON);
                        
                        document.write('JSON string: '+JSON.stringify(JSON.parse(stringJSON))+'<br><br>');
                        document.write('JSON string: '+parsedJson["firstName"]+'<br><br>');
	 </script>

Example#2

function User(name) {
	this.name = name;

}
function stringifyUser() {
	with(document) {
		var userObj = new User(getElementById('username').value);
		getElementById('message').innerHTML = JSON.stringify(userObj);
	}
}

------------------------------------------

Dynamic updation of HTML pages can be done using - BOM(Browser Object model)
The BOM model splits the browser into parts and each parts is referred as distinct Object

BOM has hierarchy of multiple Object.
  1) Parent Object for all the BOM elements is window
  
  window
  |- history
  |- navigator
  |- document
  |- location

Document Object - that represents a loaded webpage on the browser.
  In Document Object all the HTML elements are represented as Tree.
  1) document is the parent of all the innernodes and child in tree
  2) inner nodes and child represent HTML element
  3) Each HTML element can have one/more attributes

-------------------------------

Accessing element in each DOM -
  - getElementById - find an element(S) with given ID
  - getElementsByTagName - find an element(S) with HTML element name as Tag name e.g. h1, p, a
  - getElementsByClassName - find an element(S) with given class name attribute
  - querySelector - find the first element with the matched CSS query selector
  - querySelectorAll - find all elements with the matched CSS query selector

------------------------

Properties of Document Object -
  document.body - body HTML element
  document.forms - represents all the HTML forms
  document.head - represents the head element of HTML
  document.images - represents all the images under HTML
  
Other Properties -
  innerHTML - to access the contents of HTML element
  attributes[] - to find that particular attribute
  setAttribute("name", "value") - to change the attribute represented by particular HTML element

-----------------------------------

More about BOM - 
  1) Navigate to different webpage
  2) Close the browser window
  3) Store some data related to webpage e.g. history
  
  The BOM provides an Object that represents an Entire browser window, it also allows us to access and manipulate 
  the window properties
  window - parent Object all the Objects
  
  Properties-
   innerHeight - height of content area
   innerWidth - width of content area
   outerHeight - it includes height of window + tool bars and scroll bars
   outerWidth - it includes width of window +  tool bars and scrollbars
   
   localStorage - that stores the Object without any expiration date
     localStorage.setItem("key", "value");
   sessionStorage - Allows access to objects that are only stored for current session
     sessionStorage.setItem("key", "value");
































