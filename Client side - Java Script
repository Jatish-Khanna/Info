The multiple request-response cycles between client and server were consuming both time and network bandwidth.
Javascript is sufficing the requirements of Users by handling events and requests at client side

  = Improves the network utilization b/w client and servers
  = Dynamic HTML using Javascript
  = Validate Forms and handle the events at the clientn side
  = To create interactive webpages by manipulating DOM API
  
  JavaScript is an interpreted language. The browser interprets the JavaScript code embedded inside the web page, 
  executes it and displays the output. 
  It is not compiled to any other form to be executed.

Data types in Javascript-
primitives
  . number
  . string
  . boolean
 
  . undefined
  . null 
  
  non-primitive
   . object

boolean -
  true (non-zero number, string, true)
  false(0, -0, "", NaN, undefined, null)

typeof is an operator in JavaScript.
dynamic data binding:
 JavaScript is a loosely-typed language. The type of data assigned to a variable is decided at runtime. 

Deferred mode of Javascript execution-
  1) Javascript functions: These are 
    Userdefined functions
    Builtin functions
    
    
    Syntax of Functions-
      function name(aguments) {
        // Function body
        // return statement
      }
    
    Return value for Javascript function is optional. 
    // Function implictly return "undefined" if no explicit return statement is present

Calling a Javascript function:
   functionName(arguments...);

Example- 
  function sayHello(name) {
    console.log("Hello...!" + name); 
  }
In JavaScript it is perfectly normal to have functions inside functions. 
The function within another function body, is called as nested function or Closures


Note: The nested function is private to the container function and cannot be invoked from outside the container function.

Example:
  function parent(name) {
    var msg = "Hi! I'm parent " + name;
    
    return function (cName) {
      var msgChild = "I'm child of parent:  " + cName + " " + msg;
      return msgChild;
    }
    //return msg;
  }
  
  var add = (function () {
  var counter = 0;
  return function () {counter += 1; return counter}
})(); // Self invoking anonymous parent function

// Calling child function
add();

A closure is a function having access to the parent scope, even after the parent function has closed.

Javascript variable and Scope-
  1) Local variable - Defined inside a function (accessibility is from within the function in which they are defined)
  2) Global variable - Outside the Javascript functions are defined under global scope
  3) Nested variable - Variables defined in function which is nested function or closure

  Example: 
   // global scope - start
     var a = 10;
   // global scope - end
   
   function myFunction() {
     // local scope - start
      ....
      return function() {
        // nested scope of the variables
      }
   }

Note: variables undeclared and used will throw Uncaught ReferenceError.
  declare local variable without the use of keyword 'var', it takes global scope.

when lines of code within the function try accessing a variable declared both locally and globally, 
the local variable will shadow the global variable.


***************Javascript Hoisting**************************
  All but FEW(exception cases will be marked later)  variables and function declarations wherever present in the code 
    moved to TOP and get declared
  - Scope GLOBAL: they are available for all purpose use and moved to top
  - Scope Function/Local - they are available at the TOP of function
  
 Note: Only DECLARATIONS not INITIALIZATIONS are hoisted to the top
 
 Example:1
   Instead of throwing ReferenceError
   
   console.log(variable_1);
   var variable_1;
   
// Output: undefined
 As undefined is the default value

Example:2 
  with Initialization
    
    console.log(variable_1);
    var variable_1 = 'Hi';

// Output: Undefined
 Only declaration is hoisted but initialization. So, the default value is logged as result.
 
 
 ------------------Similarly Function Hoisting
 
   callingMyFunction(); // Here function is not declared and defined
   
   // Output: Uncaught ReferenceError
   
 Example:1
   callingMyFunction();
   
   function callingMyFunction() {
     // Function body ...
     ...
   }
 
 This function declaration will be hoisted to the top
 
 --------------------------------------
 
 JavaScript code is delayed or deferred till some event occurs,
 the execution is called as deferred mode execution. This makes JavaScript an action-oriented language.
 
 Event handlers are associated with DOM elements
 
 
 
 
 
 
 
 
 











