Design a ticket or similar other reservation system

1) What is online movie ticket booking system?
  A ticket reservation system allows its customer to reserve tickets online.
  It allows customers to give privilege of booking anywhere, anytime, book seats
  
2) Requirements?
  Functional requirements?
    . It should be able to list all the locations where reservation is possible
    . One the user selects the particular location in the city, a list of movies projected at selected location
    . Once user selects a particula movie, it is presented with all the shows available at particular date and time
    . User should be able to choose option and request a ticket reservation
    
    . Service should allow multiple seats to be selected out of sitting arrangement
    . A hold for free service or a lock on the request for sepecific interval until a payment has been finalized
    . The ticket booking should be serviced in First come first serve manner
    
    
  Non-functional requirements?
    . System is higly concurrent, there might be multiple client booking same slot or overlapping slot
    . The reservation involves payment - does mean should be secure and ACID compliant
    . The system should be Atomic either complete the transaction and reserve seats or nothing
    . Highly available and scalable
    
 3) Design considerations?
  . We allow anonymous users to book tickets
  . First come first service is mandatory for the normal users
  . To stop system abuse, no more than 10 seats at particular time
  . There is a posibility of spike in traffic for a hot movie or first show
  
  
4) Storage estimations?
  Assume we have 10 Million seat reservation per month
  
  a) Storage estimates?
    Assume, 500 cities, 
      10 ten cinemas in each city
      2000 seats per cinema
      and average of two shows each day
      
      - API for seat booking needs 50 bytes to 
        ID, numberOfSeats, showID, movieId, seatNumbers, seatStatus, timestamp - to be stored in database
        
        Information to be stored about the 
          - Movie
          - Cinemas
          
          500 cities * 10 cinemas * 2000 seats * 2 shows * (50 bytes + 50 bytes) = 2.6 Gb/day
          i.e. 3.6 TB per year
          
          
5) System API?
  A REST API to expose the functionality of our service.
  
  searchMovies(apiDevKey, keyword, city, longitude, latitude, radius, startDate, endDate, postalCode, resultPerPage, sorted)
  
  Parameters:
api_dev_key (string): The API developer key of a registered account. 
This will be used to, among other things, throttle users based on their allocated quota.
keyword (string): Keyword to search on.
city (string): City to filter movies by.
lat_long (string): Latitude and longitude to filter by. 
radius (number): Radius of the area in which we want to search for events.
start_datetime (string): Filter movies with a starting datetime.
end_datetime (string): Filter movies with an ending datetime.
postal_code (string): Filter movies by postal code / zipcode.
includeSpellcheck (Enum: “yes” or " no"): Yes, to include spell check suggestions in the response.
results_per_page (number): How many results to return per page. Maximum is 30.
sorting_order (string): Sorting order of the search result.
Some allowable values : 
‘name,asc’, ‘name,desc’, 
‘date,asc’, ‘date,desc’, 
‘distance,asc’, ‘
name,date,asc’, 
‘name,date,desc’, ‘date,name,asc’, ‘date,name,desc’.

Returns: (JSON)
Here is a sample list of movies and their shows:


[
  {
    "MovieID": 1,
    "ShowID": 1,
    "Title": "Cars 2",
    "Description": "About cars",
    "Duration": 120,
    "Genre": "Animation",
    "Language": "English",
    "ReleaseDate": "8th Oct. 2014",
    "Country": USA,
    "StartTime": "14:00",
    "EndTime": "16:00",
    "Seats": 
    [
      {  
        "Type": "Regular"
        "Price": 14.99
        "Status: "Almost Full"
      },
      {  
        "Type": "Premium"
        "Price": 24.99
        "Status: "Available"
      }
    ]
  },
  {
    "MovieID": 1,
    "ShowID": 2,
    "Title": "Cars 2",
    "Description": "About cars",
    "Duration": 120,
    "Genre": "Animation",
    "Language": "English",
    "ReleaseDate": "8th Oct. 2014",
    "Country": USA,
    "StartTime": "16:30",
    "EndTime": "18:30",
    "Seats": 
    [
        {  
          "Type": "Regular"
          "Price": 14.99
          "Status: "Full"
      },
        {  
          "Type": "Premium"
        "Price": 24.99
        "Status: "Almost Full"
      }
    ]
  },
 ]
          

B) Service to reserve seats

  reserceSeats(apiDevKey, sessionId, movieId, showId, []seatsToReserve)
  
    Parameters:
    api_dev_key (string):
    session_id (string): User’s session ID to track this reservation. 
    Once the reservation time expires, user’s reservation on the server will be removed using this ID.
    movie_id (string): Movie to reserve.
    show_id (string): Show to reserve.
    seats_to_reserve [] (number): An array containing seat IDs to reserve.

    Returns: (JSON)
    Returns the status of the reservation, which would be one of the following: 
    1) “Reservation Successful” 
    2) “Reservation Failed - Show Full,” 
    3) “Reservation Failed - Retry, as other users are holding reserved seats”.



6) Database design?
   Observations about the database design, we need to store-
   . One to many relationship b/w city and cinema, each city has multiple cinemas
   . Similarly, each cinema has multiple screens
   . Each Movie can have multiple bookings
   . Each movie can have multiple shows
   
   - User
   - Cinema
   - Movie
   - Show
   - City
   - Booking
   
   Relationships-
    User -> booking
    Booking -> seat
    Booking -> payment
    Movie -> shows
    City -> Cinemas
   

7) High level design?
  Our webservers will manage user sessions, application server will handle ticket management storing data in the database
  Also cache data to process reservations
  
  
  
 8) Detailed level design?
  Workflow?
    . User searches for a movie
    . User selects the location and cinema
    . User selects a screen, show, time
    . User selects number of seats to be reserved
    . User selects the location of seats in the theater, if required seats are available
    . User sends a request to webserver to reserve the number of seats
    . Seat are reserved successfully, the user have five minutes to complete the reservation
      - After payment has been completed, booking is marked
      - If payment is not done, the seats are released for next user
      
    . If there are no seats to reserve
      - but others users have locked seats for payment purpose which may be released by the user
      - New user will be redirected to waiting page, where they can wait until required seats get freed from reservation pool
      
      . If required number of seats become available, the user is taken to main page where it can lock the seats for reservation
      . User cancels the reservation is redirected to homepage and locked seats are released
      
      
      
  How to track of active reservations that haven't been booked yet?
    A) ActiveReservationService: service is required to track all the active reservations and to remove expired reservation from the pool
      Track all the reserversation is LinkedHashMap in memory
      The benefit of using LinkedHashMap - if any reservation is complete, it can be removed from the LinkedHashMap list
      in case of session expiry the head of list always points to least recently used session for payment
      
      
      To track reservation of shows? 
        . A HashTable  which represents the showID as key
        . A LinkedHashMap of confirmed bookingId and creation timestamp
    
    the data will be store in database 
      . As soon as, the booking is complete, the system will update the status to Booked
      . Remove the reservation from the LinkedHashMap of relevant show when session is expired
      . Also removing it from memory
      . A waiting service will be notified to serve the waiting customers
    
    b) WaitingUserService: Another service is required to track all the waiting usres request
      This will also be kept in LinkedHashMap and in memory to improve performance
      - The head of LinkedList will be always be pointing to longest waiting request
      
      The key would be ShowId and value would be LinkedHashMap containing UserId and wait-start-time
      
      Clients can use LongPolling for keep themself updated with reservation status
    
    
  On the Active Reservation service keeps track of expiry of active reservations, a session timeout will be shown
  Although, both will be out of sync, we can add extra five seconds on the server to safeguard from a broken experience
  
  
9) Concurrency?
  Q. No two users are able to book the same seat?
    ACID properties of DB can help us in achiving concurrency
    The transaction isolation level should be serializable
      This gurantees highest isolation level and non-repeatable phantoms.
      
     Within a transation even if we read a record, we get a write lock so the data remain highly consistent
     
     
     
10) Fault tolerant?
  If activetransactions or WaitingService crashes, we read the data from the Booking table. This can be filtered by Status column
  Or
  A master-slave architecute where if Master-crashes a slaves takes over- since we're not storing waiting users in DB


11) Data sharding?
  Sharding by MovieId will distribute the uneven load for the Hot movies, whereas with the showId evenly distributes the load among servers
  
  A consistent hashing can be used to implement ActiveReservationService and WaitingUserService based upon the showID
  This way, all reservations and waiting users of a particular show will be handled by a certain set of servers

Server holding reservations status has to perform-
. Update databse to remove the Booking and update seats as available
. remove reservation from the LinkedHashMap - under ActiveTransaction
. Notify the user that reservation has been expired
. Broadcast message to WaitingUserService for showID, to notify new seats are available
. Send a message to longest waiting User to process the request as seats are available


Workflow of successful reservation?
  . The server holding the reservation sends a mesage to all the waiting user for ShowID, that were looking for confirmed seats
  . upon receiving the message all waiting users will query the database to find how many seats are available
    - Cahce the results of query to be processed for all the waiting users
  . Expire all the users with invalid request as number of seats required are less than available














