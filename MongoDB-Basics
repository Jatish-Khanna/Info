Compass - a Mongo UI

Database -> Collections -> Documents -> Fields


Filter fields in MongoDB - 
  1. Quality filters = {"key" : "value"}
  2. Range = {"key" : {"$gte" : value1, "$lt" : value2 } }    // Used operators
  3. Nested JSON = {"key" : {"$gte" : value1, "$lt" : value2 } }
  4. GeoSpatial = {"key" : {"$geoWithIn" : [[x,y], radiusInRadians] }}

-------------------

To show avaialble database
show dbs

Use available database
use <COLLECTION_NAME>

View data in collections
db.<Collection_name>.find()

Pretty print the data
View data in collections
db.<Collection_name>.find().pretty()

it <for the next page of data>


-------------------
Data types - 

int32
int64
Double
Decimal128
String
Object 
Array
-------------------

load("FILE_NAME") - to load the contents of file in the clusture

db.<Collection_NAME>.
insertOne() --- It accepts a String/JSON as an argument, that represents document
  
  Response - 
    1) acknowledged - the Document is interted successfully or not
    2) insertedId - ObjectId("...") - The ID representing this document


if _id is present in the document, then insertedID will represent the supplied _id else Mongo DB will create _id for supplied document


3) insertMany([...]) - An array of Documents will be supplied to be inserted in Collection

  ** It is fail fast insert, as soon as the document has been inserted in the collection 
   any failure will result in stopped insertion
   
 To Change the default behavior- 
 
 3b) insertMany([...], {"ordered": false})
       Ordered key - false says, it will skip if _id field or Duplicate error is there 

-------------------

Sub document -
  "documentKey.subdocumentKey"

2) Quality matches - Match Arrays - (Full match)

 { "documentKey" : ["value1", "value2"] }

 or 
 
 {"documentKey" : "value1"} - Only single value but present in all the documents either inside array 

3) Index based search in array
 { "documentKey.0" : "value1"}

4) 


-------------------

it command in the Shell (default: 20 results for mongo shell)

find method returns cursor to the resultset
The result is returned are returned in batches
Cursors are iterated to view the results

-------------------

Mongo Projections - reduce the network overhead and processing requirements
  - Projection is a second argument to the default method.

  find({...}, {"Key" : 1})

Here "Key" shows the what all Objects/Keys to be retrieved from the Collection.
Note: It also returns the _id column from the Collections, unless explicitly exclude it.

Here Value : 1 specifies that field to be included in Projection whereas 0 says exclude it

-------------------

Updating Documents in Mongo DB

1) db.<Collection_Name>.updateOne( {"FILTER_KEY" : "VALUE"}, {$set: { "updateKey" : "updateValue"}} )

Operators:
a) $set - takes document as an argument, all Key/value pairs reflect in new version of document to be updated

Response- 
acknowledged - true  // The command is succesful
matchedCount - 1 // Total filter match count
modifiedCount - 1 // Number of document modified (should be 0 or 1 as we're using updateOne)


b) $unset - remove the specified field from the Collection
c) $min - if specified value is greater than existing field value
d) $max - if specified value is smaller than existing field value
e) $currentDate - Sets the value of field to current date, either as Date or timestamps
...

-------------------

Updating documents MongoDB - updateMany
  The same modification to all the documents that match the filter
  All the operators works as updateOne() but here it will update all the documents macthing filter
  
  
-------------------

Upsert - Update operation to create new documents when filter doesn't match
  - It use used with updateOne and updateMany() as a option parameter
  
  updateOne({"FILTER_KEY" : "FILTER_VALUE"}, 
            $set: {...},
            {"upsert" : true}
            );
  

-------------------

replaceOne() -  The replaceOne can't contain update operators
  - First found document using the filter, the changes will be done only to that document
  - $natural - uses the natural order of all the documents

let filter = {...}
let document = db.<COLLECTION_NAME>.findOne(filter)

document.field1 = "New value";
document.arry.push("New value in array")

db.<COLLECTION_NAME>.replaceOne(filter, document);

Note: replaceOne works with Complete document whereas updateOne deals with set(s) of fields to be updated
-------------------

Delete mongo document-  accepts the filter document to identify the documents to be removed
  1) deleteOne({"FILTER_KEY" : "VALUE"})
  2) deleteMany(...)


---------------------------------

The Comparison operators MongoDB- 

$eq	Matches values that are equal to a specified value.
$gt	Matches values that are greater than a specified value.
$gte	Matches values that are greater than or equal to a specified value.
$in	Matches any of the values specified in an array.
$lt	Matches values that are less than a specified value.
$lte	Matches values that are less than or equal to a specified value.
$ne	Matches all values that are not equal to a specified value.
$nin	Matches none of the values specified in an array.


$and - to specify multile criteria on the same Key, else the last KEY-Value would be considered for filter
$all	Matches arrays that contain all elements specified in the query.
$elemMatch	Selects documents if element in the array field matches all the specified $elemMatch conditions.
$size	Selects documents if the array field is a specified size.
-----------------------------------

db.<COLLECTION_NAME>.find({"KEY": null}) -> will provide all the keys with value as Null or the Key doesn't exists
db.<COLLECTION_NAME>.find({ "KEY" : {$type: "int"} }) -> filter will match all the documents where the corresponding key 
                                                          has specific type of value
db.<COLLECTION_NAME>.find({$or : [{"KEY1" : "VALUE1"}, {"KEY2" : "VALUE2"} ]}) -> 
                                              Filter will match any of the provided conditions not all are required using $or operator




















