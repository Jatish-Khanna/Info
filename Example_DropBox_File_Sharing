** Drop Box:

Cloud file storage services have become very popular recently as they simplify the storage and exchange of digital resources among multiple devices.
 The shift from using single personal computers to using multiple devices with different platforms and operating systems such as smartphones and tablets and their portable access from various geographical locations at any time is believed to be accountable for the huge popularity of cloud storage services.

Availability: The motto of cloud storage services is to have data availability anywhere anytime.
 Users can access their files/photos from any device whenever and wherever they like.


Reliability and Durability: Another benefit of cloud storage is that it offers 100% reliability and durability of data.
 Cloud storage ensures that users will never lose their data, by keeping multiple copies of the data stored on different geographically located servers.


Scalability: Users will never have to worry about getting out of storage space.
 With cloud storage, you have unlimited storage as long as you are ready to pay for it.

Some Design Considerations
We should expect huge read and write volumes.

Read to write ratio is expected to be nearly the same.

Internally, files can be stored in small parts or chunks (say 4MB), this can provide a lot of benefits e.g.
 all failed operations shall only be retried for smaller parts of a file.
 If a user fails to upload a file, then only the failing chunk will be retried.

We can reduce the amount of data exchange by transferring updated chunks only.

By removing duplicate chunks, we can save storage space and bandwidth usage.

Keeping a local copy of the metadata (file name, size, etc.
) with the client can save us a lot of round trips to the server.

For small changes, clients can intelligently upload the diffs instead of the whole chunk.




When complete file is uploaded and downloaded by client supposing 2GB. It will waste resources mentioned below
  1) Upload / Concurrency -  On single file concurrency can not be achived
  2) Latency - waiting for file to updload and download
  3) bandwidth - n/w resources to sync with server or download from server
  4) History - Maintaining versions of files will waste resources on cloud.
  
Solution:
  Client should deal with chunks of files instead of a one resource as a whole
  . Upload file on cloud server as a chunked files
  . Update text file (might be a single character)
  . Identify the chunk by client where changes happended
  . Upload only small chunk of file on cloud
  
    1) Upload/Concurrency - A client can use multiple threads to upload chunks on server
    2) Latency - Sync only chunk not whole file, imporves latency
    3) bandwidth - Sync small chunks instead of complete file (only for single chunk)
    4) History - Only updated chunk would be maintained on history
    
    Even we can harness cloud storage performance with chunks
    
How to maintain chunks (Indexer)-
  Create a metadata file with hashes of chunks. Store the same metadata file on server
  In metadata file we store indexes of chunks to create complete file from parts
 
Components
  1) Over client:
    a) Chunker - 
      . converts file into multiple chunks
      . Create hash of each chunk
      . Upload it on cloud server
      . Get the URL of each chunk stored on cloud server
      . Pass the information to indexer
      
      evaluating your peek upload concurrency against your system's available memory.
 How many simultaneous uploads you have in progress at a time would be the key critical variable in any calculation you might do.
 All you have to do is make sure you have enough memory to handle the upload concurrency, and that's rather trivial to achieve.
 Memory is cheap and you will likely run out of network bandwidth long before you get to the point where your concurrency would overrun your memory availability.

      We can statically calculate what could be an optimal chunk size based on 
1) Storage devices we use in the cloud to optimize space utilization and Input/output operations per second (IOPS) 
2) Network bandwidth 
3) Average file size in the storage etc.
 In our metadata, we should also keep a record of each file and the chunks that constitute it.

      
      
    b) Indexer - 
      . The URL and hash from chunker will be updated in DB
      . Notifies the messaging service over server side, with the created metadata file
      
    c) Internal DB - store the hash and URL of each chunk
    
    
    d) Watcher - To monitor the folder/file which should be uploaded on server (sends notification to chunker and indexer)
    
  2) Over Server:
    a) Cloud storage - where chunks of file will be stored
    
    Clients directly interact with the storage to send and receive objects from it.
 Separation of the metadata from storage enables us to use any storage either in cloud or in-house.

    
    
    b) Sync service - Which maintains the metadata
      . It parses the metadata file received from the indexer
      . Update the metadata of received from client indexer in DB having ACID properties
      . Send/Notifies all the other subscribers or clients about the changes in metadata file
      
      A scalable Message Queuing Service that supports asynchronous message-based communication 
  between clients and the Synchronization Service instances best fits the requirements of our application.
 
 Message Queuing Service will implement two types of queues in our system.
 The Request Queue is a global queue, and all client will share it.
 Clientsâ€™ requests to update the Metadata Database will be sent to the Request Queue first, from there Synchronization Service will take it to update metadata.
 The Response Queues that correspond to individual subscribed clients are responsible for delivering the update messages to each client
   
   c) Metadata storage:
    
        The Metadata Database is responsible for maintaining the versioning and metadata information about files/chunks, users, and workspaces.
 The Metadata Database can be a relational database such as MySQL, or a NoSQL database service such as DynamoDB.
 Regardless of the type of the database, the Synchronization Service should be able to provide a consistent view of the files using a database, 
 especially if more than one user work with the same file simultaneously.
 
 Metadata Database should be storing information about following objects:

Chunks
Files
User
Devices
Workspace (sync folders)

 Why Queues -  Because client can work in offline mode, or sync can be done at specific point in time.
    We want the ASync communication b/w client and server
 
 
