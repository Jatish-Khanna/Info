
Dependency Injection
. Constructor based
. Getter-Setter based dependecy inject

Configuration for dependecy Injection
. XML based
. Java code
. Annotations


Autowiring modes

Autowiring Mode	Description
byName	Autowiring based on bean name through setter injection
byType	Autowiring based on bean type through setter injection
constructor	Autowiring based on the bean type through parameterized constructor
no	No Autowiring, required dependency has to be injected explicitly using <property> or <constructor-arg> ref attribute in bean definition

----------------------

Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). 
As the name suggests, it is used to invert different kinds of controls in object oriented design to achieve loose coupling. 
Here, the control means any additional responsibilities a class has other than its main responsibility, 
such as control over the flow of an application, 
control over the flow of an object creation or dependent object creation and binding.

----------------------
Application Context is Eager loading 
BeanFactory is lazy loading

BeanFactory doesn't support Enterprise services such as Internationalization, Validation
  whereas ApplicationContext supports Enterprise services
  
BeanFactory doesn't support annotations based whereas ApplicationContext supports annotations based configuration


dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. 
A dependency is an object that can be used (a service). 
An injection is the passing of a dependency to a dependent object (a client) that would use it.

----------------------

<bean id="" class="">
  <constructor-args 
    type - type of parameter [primitive are possible]
    index - 0 based index 
    value - value of the instance variable
    name - matching name with the instance varibale name in the class to be injected
    ref - reference of the other bean


-----------------------------

Autowiring feature of spring framework enables you to inject the object dependency implicitly. 
It internally uses setter or constructor injection.
Autowiring can't be used to inject primitive and string values. It works with reference only.

autowire="byName" : Autowiring using property name.
    If a bean found with same name as the property of other bean, this bean will be wired into other beans property
    
autowire="byType" : If a bean found with same type as the type of property of other bean, 
    this bean will be wired into other beans property

autowire="constructor" : If a bean found with same type as the constructor argument of other bean, 
    this bean will be wired into other bean constructor
    First byType and then byName

autowire="no" : No Autowiring. Same as explicitly specifying bean using ‘ref’ attribute

-----------------------------
<context:annotation-config/>

@Autowired default is byType should have Qualifier to resolve

@Autowired
@Qualifier("<BEAN_NAME>") 
The @Qualifier annotation is used to resolve the autowiring conflict, when there are multiple beans of same type.


<context:component-scan base-packages="..." />

-----------------------------

@Bean 
public T methodName() { ... }

The bean created would be name as method-name in class.


@Configuration & @Bean Annotations
Annotating a class with the @Configuration indicates that 
  the class can be used by the Spring IoC container as a source of bean definitions. 
  The @Bean annotation tells Spring that 
    a method annotated with @Bean will return an object that should be registered as a bean in the Spring application context. 
The simplest possible @Configuration class would be as follows −

-----------------------------

Bean - An entity to instantiate Object 

@Controller, @Service, @Component, @Repository

Why autowire? - Exlicilty mentionning bean is not required

-----------------------------

Disadvantage of JDBC -
  1. Boiler plate code - to register driver, initiate a connection, Prepare statement, fetch result
  2. Handle checked Exception - 
  3. Iterate Resultset
  
-----------------------------

Spring JdbcTemplate is a powerful mechanism to connect to the database and execute SQL queries. 
It internally uses JDBC api, but eliminates a lot of problems of JDBC API.

Problems of JDBC API
The problems of JDBC API are as follows:

1) We need to write a lot of code before and after executing the query,
  such as creating connection, statement, closing resultset, connection etc.
  
2) We need to perform exception handling code on the database logic.

3) We need to handle transaction.
4) Repetition of all these codes from one to another database logic is a time consuming task.

Advantage of Spring JdbcTemplate
Spring JdbcTemplate eliminates all the above mentioned problems of JDBC API. 
It provides you methods to write the queries directly, so it saves a lot of work and time.


-----------------------------

<property name="hibernate.hbm2ddl.auto">create</property> will create tables. 
But it will not create database. Change the connection url to generate the database. create - 
It creates new tables corresponding mapping or annotation.

-----------------------------

private JDBCTemplate jdbcTemplate;

@Autowired
public void setJdbcTemplate(DataSource dataSource) {this.jdbcTemplate}

-----------------------------

1) jdbcTemplate.query - to fetch records from the database
 Eg. 
  List<T> query(sqlQuery, new RowMapper<T>(){ .... })

2) jdbcTemplate.update - for Create, Update, Delete operations
 Eg. 
 update(sqlQuery, new Object[]{})
 
 3) queryForXXX(sqlQuery, new Object[]{primaryKey})
    will return the object of the type we called in the form of Object class object
    
Object o1 = queryForObject(” select sysdate from dual “, Date.class) ;
Object o2 = queryForObject(” select salary from emp”, Integer.class);
Object o3 = queryForObject(” select empName from emp”,String.class);

Date d = (Date)o1;
Integer i = (Integer)o2;
String s = (String)o3;

-----------------------------

RowMapper -

RowMapper interface allows to map a row of the relations with the instance of user-defined class. 
It iterates the ResultSet internally and adds it into the collection. 
So we don't need to write a lot of code to fetch the records as ResultSetExtractor.

Advantage of RowMapper over ResultSetExtractor
RowMapper saves a lot of code becuase it internally adds the data of ResultSet into the collection.

Method of RowMapper interface
It defines only one method mapRow that accepts ResultSet instance and int as the parameter list. 

public T mapRow(ResultSet rs, int rowNumber)throws SQLException  

-----------------------------

Disadvantages of Spring JDBC -
  1. Spring JDBC is database dependent
  2. Developer should know the concept of RDBMS - as query to be provided by developer
  3. Problem of Granularity -  i.e. More or less number of Classes than number of tables
  4. Problem of Identity - Java uses equal method where as records are compared with primary key
  5. Problem of Subtype - Java has inheritance that is unavailable in RDBMS
  6. Problem of Navigation - Java uses composition easily but RDBMS has joins to fetch and concatenate data from tables 


-----------------------------

ORM - Object relational Mapping (Every class is going to be mapped to a table in database )
  . Class - Table
  . Object - Record
  . Attribute - Column
  
 Framworks - Hibernate, ibatis, toplink, eclipselink

-----------------------------

HIbernate ORM - 
SessionFactory -

Configuration object is used to create a SessionFactory object which in turn configures 
Hibernate for the application using the supplied configuration file and allows for a Session object to be instantiated.
The SessionFactory is a thread safe object and used by all the threads of an application.


1. sessionFactory.openSession()
2. session.beginTransaction()
3. transaction.commit() or transaction.rollback()
4. session.close()

-----------------------------

Dialect - specifies the format of query for the target database
hbm2ddl - Drop and autocreate tables
  validate: validate the schema, do not change happens to the database.
  update[default]: update the schema with currently execute query.
  create: creates new schema every time, and destroy previous data.
  create-drop: drop the schema when the application is stopped or SessionFactory is closed explicitly.


----------------------

EntityManagerFactory - this is Spring ORM JPA (as JPA is specification which is implemented by Other ORMs like Hibernate)
  There are multiple JPA providers which are implementing ORM.

EntityManger em = entityManagerFactory.createEntityManger();
 em.getTransaction().begin();
 ...
 // persist, save - to save
 // find - to look for Object
 // remove - to remove the Object
 
 em.getTransaction().commit();

<bean id="entityManagerFactory" ...
...
  <property name="jpaVendorName" ref="hbAdapterBean"/>
  ...
</bean>
 
<bean id="hbAdapterBean" class="...">
  ...
</bean>


----------------------

1.2 BeanPropertyRowMapper
In Spring 2.5, comes with a handy RowMapper implementation called ‘BeanPropertyRowMapper’,
which can maps a row’s column value to a property by matching their names.
Just make sure both the property and column has the same name, 
e.g property ‘custId’ will match to column name ‘CUSTID’ or with underscores ‘CUST_ID’.

public Customer findByCustomerId2(int custId){
		 
	String sql = "SELECT * FROM CUSTOMER WHERE CUST_ID = ?";
 
	Customer customer = (Customer)getJdbcTemplate().queryForObject(
			sql, new Object[] { custId }, 
			new BeanPropertyRowMapper(Customer.class));
	
	return customer;
}

----------------------

Spring JDBC -> JdbcTemplate interface accepts 
  - update method will be used for Create, delete, updated
  
Spring ORM hibernate ->
  dataSourceBean, sessionFactory beans are mandatiry
  packagesToScan -> The packages where @Entity is found
  
  SessionFactory (Autowired) -> Session Object -> openSession -> beginTransaction -> save,  -> commit -> session.close() 

Spring ORM JPA ->
  Beans: EntityMangerFactory, dataSource, jpaVendorAdapter, packagesToScan
  
  EntityManagerFactory -> EntityManger -> Transaction begin -> persist, remove -> Transaction commit

----------------------

When do we prefer Programmatic transaction and Declarative? 

----------------------

bean id="transactionManager" class="...DataSourceTransactionManager"

@Transactional - on a Method and a class

----------------------
Spring Data JPA - 

  1. Repository -> provide implementation by the framework
   public interface EmployeeRepository extends JpaRepository<Employee, Integer> { }
 
  Employee -> Entity
  Integer -> Primary Key type
  
  <jpa:repositories base-package="..." />
  
  Beans : dataSource, jpaVendorAdapter, entityManagerFactory (packagesToScan -> look for classes with @Entity)
  , transactionManager [transaction is built in part of framework, no such bean will throw exception]


----------------------

Class PageRequest
java.lang.Object
org.springframework.data.domain.AbstractPageRequest
org.springframework.data.domain.PageRequest
All Implemented Interfaces:
Serializable, Pageable

static PageRequest	of(int page, int size)
Creates a new unsorted PageRequest.

// properties define the variable list of Columns on which the Records should be sorted
static PageRequest	of(int page, int size, Sort.Direction direction, String... properties)
Creates a new PageRequest with sort direction and properties applied.

Pageable is an interface which contains requested page information. 
We can use it's implementation PageRequest which has various factory methods:

 PageRequest of(int page, int size)
Where: page - zero-based page index. 
size - the size of the page to be returned. 



================================
****************************
================================
Spring MVC -

   JSP has provided the JSTL (Tag libraries), where Views and Business logic was coupled
   
Solution!! -
  Some MVC framework - 
    Model: Data
    View: UI
    Controller -
    	Pre-process, business logic, view resolving...

BUT
  1) Coding of Controller is difficult, as it doesn't perform single responsibility
  2) Routing logic in Java file [changes require rebuilt]
  
  
----------------------

Spring MVC - 

Benefits - 
  1. A ready controller to be configured
  2. Navigation or Routing as a part of Configuration
  
  
Spring Web MVC is the original web framework built on the Servlet API and 
has been included in the Spring Framework from the very beginning. 
The formal name, “Spring Web MVC,” comes from the name of its source module (spring-webmvc), 
but it is more commonly known as “Spring MVC”.

-----------------------

Spring MVC key components -
  HTTP request
  HTTP response
  Dispatcher Servlet [Main Controller given by Spring MVC]: 
  		     Front Controller pattern (all request and response will pass through controller)
	or.springframework.web.servlet.DispatcherServlet  		
  
  web.xml
    <servlet> ... </servlet>
    <servlet-mapping> ... </servlet-mapping>
  
  
  Handler Mapping:
    It looks at the request and identifies the class/method[@Controller] which should be executed
    @Controller - is a user defined the class[POJO], 
    @RequestMapping - on a method/class, the approprite method will be choosen. That process the request
    
  Controller
  View resolver - View resolver will identify the view, if it is XML, PDF, HTML... and pass the response to corresponding view
  view - 



@Component
	@Service
	@Controller: When coding the presentation layer
	@Repository


----------------------------------

ModelAndView - built in class which holds information of data and viewName
  new ModelAndView("myView.jsp", "myModel", objectInstance);

----------------------------------

The Spring configuration file - <SERVLET_NAME>-servlet.xml

Can you Customize it?
  <servlet>
    <servlet-name>...</servletname>
    <servlet-class>...</servletclass>
    
    <init-param>
       	<param-name>...</param-name>
	<param-value>...</param-value>
   </init-param>
   
 </servlet>  



-----------------------------------

what should be the content of file-
  <beans ....>
    <!-- to import other configuration file, when multiple files are available -->
    <import resource="..."/>
    <!-- It will create beans for @Component @Repository @Service @Controller-->
    <context:component-scan basePackages="..."/>
  
  </beans>

-----------------------------------
A bean should be present in Spring to create the application context - but DispatcherServlet creates for you

	1. WebApplicationContext
	2. DefaultAnnotationHandlerMapping
	3. ViewResolver
	
-----------------------------------
@RequestMapping
  value="URI_PATTERN"
  method="RequestMethod.XXX"
  headers="application/xml"
  params="PARAM_KEY=PARAM_VALUE"
  
  This method is flexible as,
    it can accept multiple input arguments
    it can respond multiple types of argument, even cannot return anything [but an external viewResolver to be configured]
-----------------------------

Dispatcher Servlet

Central dispatcher for HTTP request handlers/controllers, 
Dispatches to registered handlers for processing
 * a web request, providing convenient mapping and exception handling facilities.

1) It can use any {@link HandlerMapping} implementation - pre-built or provided as part
 * of an application - to control the routing of requests to handler objects.

2) Its view resolution strategy can be specified via a {@link ViewResolver}
 * implementation, resolving symbolic view names into View objects. Default is
 * {@link org.springframework.web.servlet.view.InternalResourceViewResolver}.
 
 A web application can define any number of DispatcherServlets.</b>
 * Each servlet will operate in its own namespace, loading its own application context
 * with mappings, handlers, etc. Only the root application context as loaded by
 * {@link org.springframework.web.context.ContextLoaderListener}, if any, will be shared.

 * Create a new {@code DispatcherServlet} that will create its own internal web
	 * application context based on defaults and values provided through servlet
	 * init-params. 
Typically used in Servlet 2.5 or earlier environments, where the only
	 * option for servlet registration is through {@code web.xml} which requires the use
	 * of a no-arg constructor.


------------------------------

UI tag library of Spring ->
  How it is better than JSP?
   The amount of code to bind HTML forms with the POJOs

  ModelMap -> this provides a Map of String keys and Object values that can be exchanged b/w UI and backend
  
  ModelAndView -> to pass a single value to UI

@ModelAttribute -> maps the reverse the JSTL modelAttribute="" to the @ModelAttribute

------------------------------

IMplement Validations?
  BeanValidation API is an annotation based API, and validation will be done by API
  
  1. Add the 3rd party dependencies, validation-api, javax-validation, hibernate-validator
  2. Apply Built-in annotations on the Bean instance variables
  3. In case of any errors in Validation, we want to keep control on same page-
    use BindingResult
  4. @Valid attribute on @ModelAttribute to use the validations


------------------------------

 new bean -> ResourceBundleMessageSource -> to replace the keys by reading the values from properties file
 
   <bean id="messageSource" class="...">
     <property name="basename" value="fileName" />
     
   </bean>

MessageSource implementation that accesses resource bundles using specified basenames. 
This class relies on the underlying JDK's ResourceBundle implementation, 
in combination with the JDK's standard message parsing provided by MessageFormat.
-----------------------------

InternalResourceViewResolver: 

is used to resolve the provided URI to actual URI.
The following example shows how to use the InternalResourceViewResolver using the Spring Web MVC Framework.

<bean class="...InternalResourceViewResolver" >
  <property name="prefix" value="/WEB-INF/jsp/" />
  <property name="sufix" value=".jsp" />
</bean>

----------------------------

LocaleChangeInterceptor

Interceptor that allows for changing the current locale on every request, 
via a configurable request parameter (default parameter name: "locale").

 - Only when Configuring the Interceptor, a HandlerMapping should be provided
 
 
<bean id="localeChangeInterceptor" class="...LocaleChangeInterceptor" >
  <property name="paramName" value="theRequestLocale" />
</bean>

<bean class="...DefaultAnnotationHandlerMapping" >
  <property name="interceptors">
    <list>
      <ref bean="localeChangeInterceptor" />
    </list>
  </property>
</bean>

<bean id="localeResolver" class="...LocaleResolver" />

---------------------------

Why SOAP -

SOAP is good for applications that require formal contracts between the API and 
  consumer since it can enforce the use of formal contracts by using WSDL (Web Services Description Language).
Additionally, SOAP has built in WS-Reliable messaging to increase security in asynchronous execution and processing.
Finally, SOAP has built-in stateful operations. 
REST is naturally stateless, but SOAP is designed to support conversational state management.

- It can use multiple protocols
- It can Produce and Consume XML as a standard format

Asynchronous processing and invocation
Formal contracts;
Stateful operations

WHY REST 

First, REST is easy to understand: it uses HTTP and basic CRUD operations, so it is simple to write and document. 
This ease of use also makes it easy for other developers to understand and write services against.

REST also makes efficient use of bandwidth, as it’s much less verbose than SOAP. 
Unlike SOAP, REST is designed to be stateless, and REST reads can be cached for better performance and scalability.


- It uses HTTP protocol
- It can Produce and Consume multiple formats like JSON, XML...

Limited bandwidth and resources;
Totally stateless operations
Caching situations



Note: While SOAP provides ways of remotely accessing and manipulating objects, 
     REST focuses on the operations that can be executed on resources. 


Jackson/Gson - a JAX-RS implementation to serialize and deserialize Java Objects


------------------------------------

Difference b/w @Controller and @RestConrtoller

  - RestController = Controller + ResponseBody [All three are provided by Spring-framework]

-------------------------------------

org.springframework.web.
  bind.annotations.*

@Produces or @RequestMapping(produces=MediaType.Application_JSON_VALUE)

In the postman client under "Headers" tab add parameter "Accept" --> "application/json" toget json response.

Multiple types to produce-
 @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON})

@Consumesor @RequestMapping(consumes=MediaType.Application_JSON_VALUE)

---------------------------

ResponseEntity

ResponseEntity represents the whole HTTP response: status code, headers, and body. 
Because of it, we can use it to fully configure the HTTP response.

If we want to use it, we have to return it from the endpoint; 

In RestTemplate, this class is returned by getForEntity() and exchange():

 ResponseEntity<String> entity = template.getForEntity("https://example.com", String.class);
 String body = entity.getBody();
 MediaType contentType = entity.getHeaders().getContentType();
 HttpStatus statusCode = entity.getStatusCode();
 
Can also be used in Spring MVC, as the return value from a @Controller method:

 @RequestMapping("/handle")
 public ResponseEntity<String> handle() {
   URI location = ...;
   HttpHeaders responseHeaders = new HttpHeaders();
   responseHeaders.setLocation(location);
   responseHeaders.set("MyResponseHeader", "MyValue");
   return new ResponseEntity<String>("Hello World", responseHeaders, HttpStatus.CREATED);
 }

----------------------------------

Global Exception Handler in Spring - 
  
  1. Error POJO - that has exception attributes to be sent in response
  2. RestControllerAdvice - using @RestControllerAdvice over a class
  3. @ExceptionHandler(MyException.class) - 
    over the method that returns ResponseEntity<ErrorPojo>
    this method receives parameter of MyException class

-----------------------------------

An HttpMessageConverter is a Strategy interface that specifies a converter 
that can convert from and to HTTP requests and responses. 
Spring REST uses this interface to convert HTTP response to various formats e.g. JSON or XML.

Each HttpMessageConverter implementation has one or several MIME Types associated with it. 
Spring uses the "Accept" header to determine the content type client is expecting.

It will then try to find a registered HTTPMessageConverter that is capable of 
handling that specific content-type and use it to convert the response into that format before sending to the client.

----------------------------------

When do you need @ResponseBody annotation in Spring MVC? (answer)
The @ResponseBody annotation can be put on a method to indicates that
the return type should be written directly to the HTTP response body 
(and not placed in a Model, or interpreted as a view name).

-----------------------------------

The @EnableWebMvc annotation is required to 
  enable Spring MVC when Java configuration is used to configure Spring MVC instead of XML

use @ResponseStatus annotation, which allows you to send custom HTTP status 
code along with proper error message in case of Exception.

In order to use it, you can create custom exceptions and annotated them 
 using @ResponseStatus annotation and proper HTTP status code and reason.










