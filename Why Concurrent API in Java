1) Most of the Collections API - are not thread safe, using with multiple threads can lead to data inconsistency
2) The avaiable Concurrent DS like Vector, HashTable, synchronizedMap, synchronizedSet, synchronizedList doesn't give good performance
  The performance issues are due to waiting time, as only single thread can access the underlined DS
  
 3) Only single thread can modify the Collection, trying to access by other thread when first thread is iterating gives-
   ConcurrentModificationException
   
   New API - concurrent package -
   1) All the underlined DS are thread safe
   2) Have better performance than legacy concurrent API - due to locking mechanism
   3) Concurrent Modification is allowed in the underlined DS
   
   Examples- 
     ConcurrentHashMap
     CopyOnWriteArrayList
     CopyOnWriteArraySet


1) ConcurrentMap extends Map -
   *) putIfAbset() - add the entry only if the specified key is not present in the undelined collection
   *) remove(key, value) - remove the entry from the collection only if the key with specified value is present
   *) replace(key, oldValue, newValue) - replace the value for the specified key only if the key and value matches
   
2) ConcurrentHashMap implements ConcurrentMap-
  *) Undelined DS for this collections is HashTable
  *) Concurrent reads are possible from this DS
  *) Restricted concurrent write are allowed to concurrent hashmap
  *) Number of concurrent write depends on - ConcurrencyLevel default = 16 
  *) Underlined DS is HashTable so null keys and values are not allowed
  *) While one thread is writing other threads can modify the ConcurrentHashMap, it doesn't throw 
     ConcurrentModificationException
     
   Note: ConcurrencyLevel = HashMap capacity and defines the bucket locking definition(SegmentLock)
   ConcurrencyLeve < HashMap capacity then more number of buckets are handled by single lock
   ConcurrencyLevel > HashMap Capacity then more threads can lock particular bucket
