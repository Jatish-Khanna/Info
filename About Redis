Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker.

LRU and LFU (Least Frequently Used)  is actually only one of the supported eviction methods till now@Redis 4.0

while the application is running, and monitor the number of cache misses to reconfigure the cache eviction policy at runtime

Widely prefferred : allkeys-lru: evict keys by trying to remove the less recently used (LRU) keys first, 
                     in order to make space for the new data added.
 
It supports multiple datastructures to store data-
  strings, 
 hashes, 
 lists, 
 sets, 
 sorted sets with range queries
 bitmaps, 
 hyperLogLogs (O(log) at the cost of obtaining only an approximation of the cardinality.), 
 geospatial indexes with radius queries,  
 streams
 
 
Redis features:
  replication
  Automatic failover
  Lua scripting
  LRU eviction [Keys with a limited time-to-live], 
  transactions
  publiser/subscriber - message broker
  different levels of on-disk persistence,
  high availability via Redis Sentinel
  automatic partitioning with Redis Cluster


Redis supports atomic operations:
  append to a String, 
  increment value in hash, 
  pushing an element to a list
  Set intersection, union and difference
  member with highest ranking in a sorted set
  
  
  
 Note:  full durability, and in these cases Redis was not a viable option. 
  but the above can be achived with AOF - (appendonlyfile).
  
  How durable is the append only file?
    Configure Redis to fsync data on disk
    a) appendfsync always - Very very slow, very safe
    b) appendfsync everysec (recommended and default) - lose 1 second of data if there is a disaster
    c) appendfsync no - The faster and less safe method. Normally, flush data every 30 seconds or depends on OS kernel
    
    
How Redis handles AOF failures?    
while writing the AOF file, or that the volume where the AOF file is stored is store was full    
    - AOF still contains consistent data representing a point-in-time version of dataset
  ** latest version of Redis, will work like interpreter and load the file until proper data is found [default], 
    can be changed to fail-fast instead of fail-safe
    
 It also provides - redis-check-aof utility to find the difference
 
How it writes AOF while writing -

  1) Forks, we have parent and child
  2) Child start with new AOF in a temporary file
  3) Parent accumulates all the new changes in memory buffer and appends changes in the old append only file
  4) When child completed with temporary file, parent appends the data from buffer to temporary file
  5) File get renamed as new AOF
 
Redis Persistence can be optionally disabled to levrage feature-rich, networked, in-memory cache
    
Redis Replication [client writes, keys expired or evicted, any other action changing the master dataset] - file redis.conf
  Very fast non-blocking first synchronization,
  auto-reconnection with partial resynchronization on net split
  very simple to use and configure leader follower (master-slave) replication
  A master can have multiple slaves
  All slaves will receive replication stream from the master
  Redis replication is non-blocking on the master side
  scalability, in order to have multiple slaves for read-only queries
  Diskless replication ( repl-diskless-sync)
    
 Replication Scenarios -
   a) well-connected, the master keeps the slave updated by sending a stream of commands to the slave
   b) slave reconnects and attempts to proceed with a partial resynchronization
   c) Failed partial resynchronization: 
                               master needs to create a snapshot of all its data, 
                               send it to the slave,
                               continue sending the stream of commands to slave
 
  Note: masters with persistence turned off configured to auto restart are dangerous
    1. Node A is a master, and Node B, C are slaves in-sync replicas
    2. Node A crashes and restarts with empty data set
    3. Node B,C recieves with command to detroy copies from Node A
    
 The above issue is also possible with the sentinel or in a Redis clusture because restart may go undetected in Clusture
 
 So, auto restart of instances should be disabled.
 
Redis replication deals with expires on keys
  Slaves don't expire keys, instead they wait for masters to expire the keys
  Slaves use logical clock in order to report that a key does not exist  for read operations in case of slaves as read replicas


NOte: When Docker, or other types of containers using port forwarding, or Network Address Translation is used, 
      Redis replication needs some extra care

incrementing the value of a key with INCR, pushing a new value into a list with LPUSH, or 
altering the field value of a hash with HSET are all operations that will leave the timeout untouched.


Keys expiring information is stored as absolute Unix timestamps
For expires to work well, the computer time must be taken stable


Why in-memory DBs are preferred over traditional malloc/free?
  malloc/free functions are the most common method for allocating and releasing memory. 

 Issues with malloc/free-
  1) developers, malloc and free will easily cause memory leakage; 
  2) the frequent calls in highly concurrent systems makes it difficult to recycle and reuse memory fragments, 
           reducing the memory utilization; and poor performance
   3) the system calls has an overhead 
   
Therefore, to improve the memory management efficiency and utilization community memory management solutions will help out. 

E.g. Redis and MemcacheD adoptmemory management mechanisms to support this
