kafka-
  A database that is storing, processing, and reacting infinte streams of data - a Pub/Sub stream data platform
  
  1. Like Hadoop - but Kafka stores continuous stream 
    whereas Hadoop stores big-batch of the files and process them on scheduled batches
    
  2. Enterprise Messaging - It is unified,elastic, cloud ready and modelled on distributed foundation systems
      
  3. Evolution of ETL and intergration-
    Any channels of input can source data/event to Kafka
    
    
    Example -
      A self driving car - ingress data from different cameras and sensors
       egress - the predictive actions
       
      Fraud detection systems
      E-com recommendation systems
      Log monitoring
      
      
  Kafka considers each action as event and such we have stream of events
  
       
-----------------
Application to Cloud-
  Rather than having point to point connections b/w the public and on-premise cloud
  we have a bridge as a Kafka that publishes the streams on both sides
  
  . This helps in maintaining
  . Sync data
  . All this is real-time as part of event stream
  . Scalable with Kafka clustures
  . Huge storage as if connection is down or backpressure to be implemented
  
------------------
Apache kafka

Kafka Connect-
  ingest from RDBMS, Mainframe, IoT ...
  Consumers as Hadoop, NoSQL, data stores, Object storages like S3
  Middleware integration b/w different API's
  
Kafka Streams-
  For embedded stream processing in applications like another library

Kafka Stream Interactive Query - 
  to retrieve state from Kafka i.e. monitoring
  
 ------------------
  Confluent OpenSS Kafka

Schema Registry - for data governance/quality
Connectors - drivers for different systems
REST proxy - 
------------------
Confluent Enterprise 

Control Center - for management, Graphical management and alerting
Replicator - Multi-data center replication between Kafka clustures
Auto databalancer - shifts data to create an even workload across the Kafka
Client Library: JMS messaging serive
And Enterprise support -



==================================
Components when discuss Kafka -

  Kafka clusture
  Producers - Serilalized 
  Consumers
  Brokers
  Message
  Topics - Named pipes/queues - Ordered collection []
  Zookeeper

Message in the topic are in the form of byte-array but 
  the typing contract is required which defines the format of message inside each topic
  
  - Each topic maintains the ordered collection of messages
  - Many producers can write to topic
  - Multiple consumers can read from topic
  
Kafka is a scalable middleware integration system, considering that problems to deal with-
 *) One broker may fail and all the data stored or topics may lost
 *) Huge load on a topic to be handled or Too much data that cannot be stored on one machine
 
 
 Solution:
 Partitioning Data ingestion:
 . Each partition contains the subset of the "Topic's messages"
 . Each partition is an "ordered" like queue, immutable log of messages
 
Partitions are distributed across brokers
*) Message key determines which partition a message is assigned to [Hashes the Key]
  - Consumer can override the Key at the time of Ingestion


==============================
Kafka Producers?
  Are the Channels/Programs that writes messages to Kafka Clusture/Broker/Partition
  - this can be done using the API's
  - Producers can be written in any Language as Drivers are available
  - native language of Kafka is Java
  - REST proxy provides that can also be used to send messasges
  - A CLI is available for debugging and testing purpose
  
  Partitioning Strategy? or I say it Loadbalancing b/w the Kafka paritions
    How Producer decides to choose Kafka Topic distributed amond Kafka Brokers in clusture
    
  How This is done?
    * Hash the key of Kafka message
    * Select the respective Parition for the hash
    * If Keys are not specified than default (Round robin fashion)
    
  Challenges or  Virtue?
    - The above partitioning strategy doesn't maintain the Order of Kafka messages
    - If Ordering is important than-
      Override the Partitioning strategy or Load balancing
      
      
    Note: By default, Each partition maintains the Order but Topics (doesn't maintain)
    
 ==================================
 
    
    
    
    
 










 
 
 
 
 
 












