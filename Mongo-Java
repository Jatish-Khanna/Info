Build MongoDB Java driver -
  . Peformant 
  . resilient
  . Robust 

mongorestore
A utility for importing binary data into MongoDB.
mongo
The shell for exploring data in MongoDB.

URL to connect to MongoDB -
 mongodb://<USER>:<PASSWORD>@<HOST>/<database>?retryWrites=true
  
  HOST - is the host name of SRV server.
   The HOST is not a database server, it only holds the SRV(Service) records.
   It has a list of DNS which only SRV can resolve
   
   This is used when Servers in Clusture change, which gives privilege not to update anything on client when clusture changes
 
 
 retryWrites - To try writes if error while writing the documents to DB
 
 The --username and --password flags cannot be used with and SRV string. 
 Instead, include the username and password in the SRV string 
 (i.e. mongodb+srv://USER:PASSWORD@<your-cluster-address>)
 
 ---------------------  
   
   MongoDB drivers Java-
   
   1) <groupId>org.mongodb</groupId>
      <artifactId>mongo-db-sync</artifactId>
      
   2) 
    <groupId>org.mongodb</groupId>
      <artifactId>mongo-db-async</artifactId>
      
---------------------     
 Driver Base Classes -
   1) MongoClient - connection b/w app and Clusture
   2) MongoDatabase
   3) MongoCollection
   4) Document
   5) Bson
   
---------------------  
Connection in action, Can you code it?
  // MongoClients Builder provides a conncetion to the provided in the uri string

  MongoClient mongoClient = MongoClients.create(uri)
   
 // The client configuration can be done using MongoClientSettings
 // The instance can be extracted from MongoClient instance
 // This class offers a builder method - that allows to create multiple clients with different options
 MongoClientSettings mongoClientSettings;
 
 ConnectionString connectionString = new ConnectionString(uri);
 mongoClientSettings = MongoClientSetting.builder()
                                          .applyConnectionString(connectionString)
                                          .applyName("TestName")
                                          .applyConnectionPoolSettings(
                                            builder -> builder.maxTimeWait(1000, TimeUnit.MILLISECONDS)
                                          .build();
 MongoClient mongoClient = MongoClients.create(mongoClientSettings);
   
   
---------------------  

List all the Database names using the created MongoClient connection
  MongoIterable<String> databaseListIterable = mongoClient.listDatabaseNames();
   
Note: MongoIterable<T> is exhaustible like a Cursor or ReadAHead queue. 
  - So store the data persisted by MongoIterable in Custom DS/Collections
   
---------------------  

Get Mongo Database from the MongoClient

  MongoDatabase mongoDatabase = mongoClient.getDatabase("DB name");
   
---------------------     
 Get Mongo Collection in the database
 
   MongoCollection mongoCollection = mongoDatabase.getCollection("Collection_NAME");
   
 ---------------------  
 
 Find the data in MongoCollection i.e. execute DML
 
    MongoIterable<Document> mongoFullDB = mongoCollection.find().limit(10);
   
---------------------  
A simple Document in Java

{
  "Top" : {
    "First Key" : "value"
  },
  "Key2" : "value"
}
  Document document = new Document(
                    "Top", new Document("First Key", "Value").append("Key2", "Value"));

  mongoCollection.insertOne(document);

NOte: Documents are Bson datastructures thats why Document implements Bson interface in the API

----------------------

Find Using Java classes -

 Document findOverFilter = new Document("FILTER_KEY", "FILTER_VALUE");
 Document document = mongoCollection.find(findOverFilter);

or 

Bson findUsingBson = eq("FILTER_KEY", "FILTER_VALUE")

 Document document = mongoCollection.find(findUsingBson);

-----------------------

Find in an Array Using Java

 Document findOverFilter = new Document("FILTER_KEY", new Document(
                                                            "$all", Arrays.asList("Key1", "Key2")));
 List<Document> resultList = new ArrayList<>();
 mongoCollection.find(findOverFilter)
                                    .into(resultList);

or 

Bson findUsingBson = all("FILTER_KEY", "FILTER_VALUE1", "FILTER_VALUE2")
List<Document> resultList = new ArrayList<>();
mongoCollection.find(findUsingBson).into(resultList);
 
-----------------------------

A complex query using Java with multiple operators

Bson findUsingBson = and(
                      eq("FILTER_KEY", "FILTER_VALUE"),
                      eq("FILTER_KEY1", "FILTER_VALUE1"),
                      gte("FILTER_KEY2", "FILTER_VALUE2"),
                      lt("FILTER_KEY3", "FILTER_VALUE3"));
                      
List<Document> resultList = new ArrayList<>();
mongoCollection.find(findUsingBson).into(resultList);
 
-----------------------------

Projections using Java 

    Document oldFilter = new Document("FILTER_KEY", "FILTER_VALUE");
    Document oldResult =
        moviesCollection
            .find(oldFilter)
            .limit(1)
            .projection(new Document("projection_key", 1).append("projection_key_2", 1))
            .iterator()
            .tryNext();
 
 or
 
 
     Bson queryFilter = and(eq("FILTER_KEY", "FILTER_VALUE"));
    Document result =
        moviesCollection
            .find(queryFilter)
            .limit(1)
            // this feels much more declarative
            .projection(fields(include("projection_key", "projection_key2"))) // , exclude("_id") to exclude field or excludeId()
            .iterator()
            .tryNext();
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 









