The most important feature Java 9 has brought into market is "Modularization"

The distribution of Java projects can be done as-
  Modular Jars
  JMOD files
  Custom runtime image


Java platform updates-
  Module System 
  JShell
  
Library Features-
  New factory methods in Collections framework
  Stream API enhancements
  Process API
  HTTP/2.0
  Compact Strings
  Enhancement of @Deprecated annotation
  
  
Java language Features-
  New try-with resources
  Private methods in interfaces
  @SafeVarargs on private instance methods
  Diamond Operator with Anonymous classes
  
JVM -
  Garbage collection
  
  =======================
  JPMS - Java platform module system
    * JDK/JRE the rt.jar is too big for the modern day infrastructure like IoT devices
    * Weak encapsulation?
      A package exposes all its public types to other packages and no way to prevent the global visibility
      No encapsulation above the packages, not even by Jars 
    
    
   Actual specification from JSRs
   1. JEP 261 - Create a module system for the language
   2. JEP 220 - Update the runtime to support modularity
   3. JEP 201 - Modularize JDK source
   4. JEP 200 - Modularize the JDK libs
   5. JEP 260 - Encapsulate most internal API's 
   6. JEP 282 - Create smaller runtime with subset of modules from JDK
   
   
   Why modularity?
   * Ease of support of runtime for different h/ws
   * Maintenance and reusability 
   * Improved performance, startup time and memory usage of applications
   
   Platform modules-
     1. Standard modules -
       The name of these modules starts with java.*
       These are supported and intended to be used by developers
       
       
       Example-
       java.rmi.*
       java.log.*
     
     2. Non-standard modules - 
       The name of these modules start with jdk.*
       Non-standard modules contain packages and specific JDK code, distinct b/w implementations of JDK
       
   How to identify and describes the modules?
     java --listmodules
     java --describe-module <MODULE_NAME>
     
     
  ===========================
  Module - An encapsulated package having self-describing code and features
    module-info.java provides details of packages, resource files,
      * The module descriptor file that specifies behaviour and accessibility
      
      - A unique name of the module (which can only be used by other modules to access it)
      - A list of other modules it requires
      - List of packages that it exports to other modules
      - A list of services it uses
      - a list of service implementation it provides
      
      
      
   Contents of module-info.java
   
   module com.module.name { }
   
   Looking at Above code in module-info.java, the package structure should be like-
   
   Project_name|
                |__com.module.name|
                                  |_____packages
                                  |
                                  |_____module-info.java
   
   
   How to Compile the completed Project?
     javac -d output --module-source-path .
   
    -d <OUTPUT_PATH_FOLDER> : The compiled files will be stored at the specified path
    --module-source-path specifies the location containing source files for multiple modules
    
    
    Funny! can you execute the Program?
      java -p <OUTPUT_PATH> -m <MODULE_NAME>
      
      -m specifies the module name where main class resides
   
   
   Module accessibility?
   Main Module-
   ---------
   exports - to expose the specific package from the modules
   
   module com.module.name {
      exports com.module.name;
    }
   
   Other Modules
   ---------------
   requires specifies the module it depends on
   
   
   module com.module.requires {
    requires com.module.requires;
  }
   
====================
Policies on Modules?
  When a module requires another modules-
  . Module First should mention the package required
  . Module Second should export the package required by module First
  . The types in the exported package must be public
  
  Controlling what module requires and what module exposes defines the encapsulation at package level
  ------------------------------------------
  
  Module readability?
  
  1. requires transitive X - if module Y reads X module, all other modules which require module Y will be able to read X. 
  2. export package to X - export the package named "package" only to module X
  
  
Note: while exporting a package, all the sub-packages haven't been exported
 Using anything that is not exported or that is not specified as required will cause compilation error


Both Service Consumer and providers read providers interfaces  
  
  
  -------------------------------------

Distribution Files:
 1. Jar files:
  jar -c -f <jar output path\jar-name.jar> -e <module name/main class> -C <module output path\module name> .
  
  -c create new jar file
  -f specifies the Jar file name
  -e specify the main class
  -C The directory to include files from 
  . means all the files from Path

** Execute the jar file and a specific modules

java -p <PATH_NAME> -m <MODULE_NAME>
  
  
2. JMOD - 
  a new packaging format similar to JAR, but it can contains files other than class, metadata and resources 

Example Native code

Note: JMOD are not executable archives 

To create new JMOD files-
jmod create --class-path out\production\<module> jmods\<module>

To extract JMOD files-
 jmod extract --dir bin\com.greeter.ui jmods\greeter.ui.jmod
  
3. Custom runtime images-
  These applications bundled with JVM and required modules. The executable doesn't require any 3rd part dependency

How to create runtime images? - jlink
 It assembles all the modules and their dependencies into custom runtime images
jlink -p "%JAVA_HOME%\jmods;<application output path>" --add-modules <MODULES_TO_INCLUDED> --output <OUTPUT_CUSTOM_PATH>


-p : specifies the module paths for dependency resolution 
--add-modules : specify the root module and addition modules (a comma separated list)
--output : provides the path for dependency resolution

**Other switches**
--launcher <name of launcher>=<module name/main> to create a launcher (batch file)
--no-header-files to exclude header files
--no-man-pages to exclude manual pages
--strip-debug to exclude debug information from the output image
--compress=2 to compress the content (using ZIP compression)

Note:
  The exporting and requiring modules do not allow access through reflection.
  If reflection is required, code has to be opened for it  -

a) Add open clause in the module descriptor
  open module com.test{}

b) Adding opens clause for each package (cannot be combined with open).
   module com.test1 { opens test; }
   
  --add-opens <source/package>=<target module> to override the module definition


------------------------
Modules and it benefits?
  1. Modules create scaled down images for smalled computing devices
    . The JDK/JRE has been modularized to enable this feature

  2. Strong encapsulation: A module can declare which of public types are accessible to other modules.
     This allows exposing only what should be public, and provides interfaces among modules for interactions

  3. Reliable Configuration: A module can declare its depedency on the other modules,
       the dependency has been checked at compile and runtime, hence helps the JARs related issue in older Java versions

  4. Each modules follows Single responsibility. This helps in easier construction and maintenance of large Cohesive 
     and loosely coupled applications

  5. The actual requirements/dependecy are known that helps to know all components to run an application.
       
  
  
  
  
  
  
  
  
  
  









