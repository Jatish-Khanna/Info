The most important feature Java 9 has brought into market is "Modularization"

The distribution of Java projects can be done as-
  Modular Jars
  JMOD files
  Custom runtime image


Java platform updates-
  Module System 
  JShell
  
Library Features-
  New factory methods in Collections framework
  Stream API enhancements
  Process API
  HTTP/2.0
  Compact Strings
  Enhancement of @Deprecated annotation
  
  
Java language Features-
  New try-with resources
  Private methods in interfaces
  @SafeVarargs on private instance methods
  Diamond Operator with Anonymous classes
  
JVM -
  Garbage collection
  
  =======================
  JPMS - Java platform module system
    * JDK/JRE the rt.jar is too big for the modern day infrastructure like IoT devices
    * Weak encapsulation?
      A package exposes all its public types to other packages and no way to prevent the global visibility
      No encapsulation above the packages, not even by Jars 
    
    
   Actual specification from JSRs
   1. JEP 261 - Create a module system for the language
   2. JEP 220 - Update the runtime to support modularity
   3. JEP 201 - Modularize JDK source
   4. JEP 200 - Modularize the JDK libs
   5. JEP 260 - Encapsulate most internal API's 
   6. JEP 282 - Create smaller runtime with subset of modules from JDK
   
   
   Why modularity?
   * Ease of support of runtime for different h/ws
   * Maintenance and reusability 
   * Improved performance, startup time and memory usage of applications
   
   Platform modules-
     1. Standard modules -
       The name of these modules starts with java.*
       These are supported and intended to be used by developers
       
       
       Example-
       java.rmi.*
       java.log.*
     
     2. Non-standard modules - 
       The name of these modules start with jdk.*
       Non-standard modules contain packages and specific JDK code, distinct b/w implementations of JDK
       
   How to identify and describes the modules?
     java --listmodules
     java --describe-module <MODULE_NAME>
     
     
  ===========================
  Module - An encapsulated package having self-describing code and features
    module-info.java provides details of packages, resource files,
      * The module descriptor file that specifies behaviour and accessibility
      
      - A unique name of the module (which can only be used by other modules to access it)
      - A list of other modules it requires
      - List of packages that it exports to other modules
      - A list of services it uses
      - a list of service implementation it provides
      
      
      
   Contents of module-info.java
   
   module com.module.name { }
   
   Looking at Above code in module-info.java, the package structure should be like-
   
   Project_name|
                |__com.module.name|
                                  |_____packages
                                  |
                                  |_____module-info.java
   
   
   How to Compile the completed Project?
     javac -d output --module-source-path .
   
    -d <OUTPUT_PATH_FOLDER> : The compiled files will be stored at the specified path
    --module-source-path specifies the location containing source files for multiple modules
    
    
    Funny! can you execute the Program?
      java -p <OUTPUT_PATH> -m <MODULE_NAME>
      
      -m specifies the module name where main class resides
   
   
   Module accessibility?
   Main Module-
   ---------
   exports - to expose the specific package from the modules
   
   module com.module.name {
      exports com.module.name;
    }
   
   Other Modules
   ---------------
   requires specifies the module it depends on
   
   
   module com.module.requires {
    requires com.module.requires;
  }
   
====================
Policies on Modules?
  When a module requires another modules-
  . Module First should mention the package required
  . Module Second should export the package required by module First
  . The types in the exported package must be public
  
  Controlling what module requires and what module exposes defines the encapsulation at package level
  ------------------------------------------
  
  Module readability?
  
  1. requires transitive X - if module Y reads X module, all other modules which require module Y will be able to read X. 
  2. export package to X - export the package named "package" only to module X
  
  
Note: while exporting a package, all the sub-packages haven't been exported
 Using anything that is not exported or that is not specified as required will cause compilation error


Both Service Consumer and providers read providers interfaces  
  
  
  -------------------------------------

Distribution Files:
 1. Jar files:
  jar -c -f <jar output path\jar-name.jar> -e <module name/main class> -C <module output path\module name> .
  
  -c create new jar file
  -f specifies the Jar file name
  -e specify the main class
  -C The directory to include files from 
  . means all the files from Path

** Execute the jar file and a specific modules

java -p <PATH_NAME> -m <MODULE_NAME>
  
  
2. JMOD - 
  a new packaging format similar to JAR, but it can contains files other than class, metadata and resources 

Example Native code

Note: JMOD are not executable archives 

To create new JMOD files-
jmod create --class-path out\production\<module> jmods\<module>

To extract JMOD files-
 jmod extract --dir bin\com.greeter.ui jmods\greeter.ui.jmod
  
3. Custom runtime images-
  These applications bundled with JVM and required modules. The executable doesn't require any 3rd part dependency

How to create runtime images? - jlink
 It assembles all the modules and their dependencies into custom runtime images
jlink -p "%JAVA_HOME%\jmods;<application output path>" --add-modules <MODULES_TO_INCLUDED> --output <OUTPUT_CUSTOM_PATH>


-p : specifies the module paths for dependency resolution 
--add-modules : specify the root module and addition modules (a comma separated list)
--output : provides the path for dependency resolution

**Other switches**
--launcher <name of launcher>=<module name/main> to create a launcher (batch file)
--no-header-files to exclude header files
--no-man-pages to exclude manual pages
--strip-debug to exclude debug information from the output image
--compress=2 to compress the content (using ZIP compression)

Note:
  The exporting and requiring modules do not allow access through reflection.
  If reflection is required, code has to be opened for it  -

a) Add open clause in the module descriptor
  open module com.test{}

b) Adding opens clause for each package (cannot be combined with open).
   module com.test1 { opens test; }
   
  --add-opens <source/package>=<target module> to override the module definition


------------------------
Modules and it benefits?
  1. Modules create scaled down images for smalled computing devices
    . The JDK/JRE has been modularized to enable this feature

  2. Strong encapsulation: A module can declare which of public types are accessible to other modules.
     This allows exposing only what should be public, and provides interfaces among modules for interactions

  3. Reliable Configuration: A module can declare its depedency on the other modules,
       the dependency has been checked at compile and runtime, hence helps the JARs related issue in older Java versions

  4. Each modules follows Single responsibility. This helps in easier construction and maintenance of large Cohesive 
     and loosely coupled applications

  5. The actual requirements/dependecy are known that helps to know all components to run an application.
       
  
  ------------------------------
  
  Flow API -
    The new flow API is available in java.util.concurrent package and java.base module
    The modules is a publisher/subscriber model with easy management of data flow.
    
    Main Componenets?
     1. Publisher<T> - A client which send the data to all the subscribers 
       A funtional interface with "subscribe()" method
       
     2. Subscriber<T> - A client which receives messages from the Publisher
       The methods to be implemented by subscribers-
       onSubscribe() - when the client has subscribed to Publisher
       onNext() - For each received item
       onError() - If an error occurred at Publisher or Subscriber end
       onComplete()  - When Publisher has finished the stream
       
     3. Subscription -
       An Object to represents the connection b/w Publisher and Subscriber
       request() - 
       cancel() - Allows the Subscriber to cancel the subscription 
       
       Note: The subscription Object has been sent to establish a connection by Subscriber with Publisher
       
     4. Processor<T, R> - Represents a common component b/w Publisher and Subscriber
       - This transforms the messages from Publisher to be received by the Subscriber
       
       
   Publisher/Subscriber model-
   
   Publisher                                            Subscriber
    subscribe()     <---------------------------
     
             Subscription --------------------->        onSubscribe()
                             
                           <-------------------------request(n) / cancel()        // Requesst n items or cancel the subscription
                           
               ---------send items to Subscribers----------> onNext()
               
               ----if error----------------------------->  onError()
               ----End Stream ------------------------->     onComplete()
               
               
 a) The Subscriber subscribes for a Publisher and on successful subscription onSubscribe method has been called
  b) Once subscription is established all the interactions happen using Subscription
 c) The Subscriber request for items from the Publisher using the Subscription
 d) For each item being published onNext() has been called
 e) If there are no more items to be published, it invokes onComplete() method
 f) To cancel the subscription cancel() method has been called - 
 
 Note: All the pending request before the cancel() will be served
 if Failed on any of above steps -> onError method is called and ends the stream with IllegalStateException
  
==============================
Advantages of Streams?
  1. Aysnchronous process of infinte events -
    a) Pub/Sub are independent of each other, 
      . The Publisher publishes independent of Subscription
      . The Subscribers independently process the message 
      
  2. Backpressure - The backpressure is maintained at the Publisher end since it doesn't overwhelms slow Subscribers
    The Publisher works independently with other Subscriptions maintaining backpressure independently
    
    
 =============================
 Improvements in Core Libraries-
   ** Collection API updates
   
   ** Compact String - The string that represent encoding with 8byte are represented with space efficient way instead of 16 byte
   
   ** Enhanced @Deprecated annotation 
     . Specifies when the resource will be removed in Future releases
     . Specifies when the resource was deprecated in the API  
     
     Example - 
     @Deprecated(forRemoval = true, since = "1.1")
     // To remove the deprecated and removal warning
     @SuppressWarnings({"deprecation","removal"})
     
   ** Stream API
    1. takeWhile() method
    This method is used to get a stream of the elements until the Predicate is satisfied
   
   NOte:
     a) If the original Stream is unordered but some elements satisfy 
     the Predicate condition then the behavior of this method cannot be determined
     b) If none of the elements satisfy the Predicate condition, then irrespective of 
     whether the original Stream is ordered or not, the method will return an empty Stream
     c) If all the elements satisfy the Predicate condition, then irrespective of whether the original Stream is ordered or not, 
     the method will return a Stream with elements same as the original Stream
   
   2) 2. dropWhile() method
    The dropWhile() method works exactly opposite of the takeWhile() method
    will start adding the  objects from the original Stream, after the first true condition based on the Predicate is reached.
   
    a) If the original Stream is unordered but some elements satisfy 
     the Predicate condition then the behavior of this method cannot be determined
     b) If none of the elements satisfy the Predicate condition, then irrespective of 
     whether the original Stream is ordered or not,  the method will return a Stream with elements same as the original Stream
     c) If all the elements satisfy the Predicate condition, then irrespective of whether the original Stream is ordered or not, 
     the method will return an empty stream
   
   3) Overloaded Iterate-
     Stream<Integer> integerStream = Stream.iterate(1, i->i<101, i->i+1);
     Stream<Integer> integerStream = Stream.iterate(1, i->i+1);
   
   
   ** HTTP/2.0-
   
   The main problem with HTTP/1.1 was that there couldn’t be more than six open connections at a time.
    it used one thread per request/response. To overcome the issues, HTTP/2.0 was designed.
    
    Features of HTTP 2.0 :  module (jdk.incubator.httpclient)
      . Multiple request over the same connection
      . WOrks in Sync and Ansync mode
      . Smaller header size when compared to older version
      . Server push is possible, also possible when clients has not made any request
      
      
   
   * Process API -
      This API handles OS processes. 
      A new process can be started and process stream can be read using input streams or can be redirected to a file.
      the updated API can be used to get the process ID, process start time, CPU usage by the process or the process owner. 
      The improved API can also be used to gather information about all the processes in a system.
     
     Example-
     
     ProcessBuilder pb1 = new ProcessBuilder("notepad.exe");    // Line 1
      Process notepadProcess = pb1.start();                      // Line 2
    
    // To get information related to Process using the ProcessHandle 
     ProcessHandle ph = notepadProcess.toHandle();        // Line 1
    ProcessHandle.Info info = ph.info();                 // Line 2
     
 ==============
  
  Other Java 9 Language features-
    1) No single underscore as variable name
      int _= 1;  // Valid till Java 1.8 
      // In Java 9 this will give compilation error
      
    2) Improved try-with-resources
    
    void fileReader() throws IOException{
    BufferedReader reader1 = new BufferedReader(new FileReader("sample.txt
    // Without "new" operator we get a compilation error in lower version of Java 9
    try(reader1) {
        System.out.println(reader1.readLine());
    }
    catch(Exception e) {
        System.out.pritnln(e.getMessage());
    }
}
    
    
    3) private methods in interfaces
    
    public interface InterfaceWithPrivateMethodExample {    
      private void privateMethod(){         
           System.out.println("I am a private method inside @Interface");
      }
    }
    
    4) @SafeVargs annotation on private methods
      This annotations can be applied on -
       . Static method
       . Final method
       . Constructors
       
       ** Java 9 allows to write annotation on private methods
       
       To notify the compiler use of Variable arguments and Generic Type is safe.
       
    5) Diamond <> operator with anonymous classes
    
      Comparator<String> comparator = new Comparator<>() {          // On the right side <> cannot be used before Java 9(Compilation Error)
        @Override
        public int compare(String o1, String o2) {
            // Code
        }
      };
    
 ====================================================
 
 Garbage Collection in Java 9----
  Built in feature of Java is memory management
  
  Old Generation ||   Young Generation
                  ===========================================
                    Survivor space || Eden Space
                    ==============
                     S0 || S1
                     
   1) Eden Space - The newly created Objects are allocated 
     When the space is full upto percentage, a garbage collection is performed for the young generation 
     Known as minor Garbage Collection
     
   2) Survivor Space - Once the Object survives the minor Garbage collection, it will be moved to One of Survivor space
        - The transformation happens b/w both the survivor space during Minor Garbage collection
        - All the Object which survive will be moved to Other Survivor 
        - At single point, one of Two survivor space will be empty
        
        
    3) Old Generation - The Object is moved to Old Generation when it survived multiple cycles of Minor garbage collection
      - When Old Generation is full, the Major garbage collection is performed on JVM
      
 ** When all the Java threads have been put on Hold during the Garbage Collection algorithm execution
   - is called Stop-the-world event and such Garbage collectos are known as Stop-The-World garbage collectors
   
 =================================  
 Mark-Sweep-Compact Algorithm - 
   1. Marking Phase - mark all the Object which are not being used and being used indivually
   2. Normal Deletion phase - Unused Object have been deleted and memory is reclaimed for other Objects
   3. Deletion with Compaction Phase - After deleting the Object, memory has been reclaimed 
        The free spaces is compacted to bring all empty slots together.
        This increases the performance of allocation of memory

====================================

Different Garbage Collection Algorithm Explained?
  1. Serial Garbage Collector- (Java 5 and 6 default algorithm)
    * It uses Mark-Sweep-Compact algorithm to reclaim the space
    * A single garbage collection thread is executed for Minor and Major garbage collection algorithms
    * It has Stop-The-World pause for both the garbage collection phases (Minor or Major)
    
    
    What it does?
    --Minor Garbage Collection--
     a) During Mark phase - all the Objects has been marked in Eden and Survivor space
     b) Sweep phase - all the Objects have been sweeped in Eden and Survivor space
     c) Compaction - 
       It moves Object from S0 ---> S1
       It moves Objects from Eden --> S1
       It moves Older objects to S0 --> Old generation
       Cleans the S0 space
       Represent S1 as S0, i.e. S1 will be empty

    --Major Garbage Collection--
     a) Mark all the Objects in Old generation
     b) Sweep - Sweep all the unused Objects and clean the space
     c) Compaction - Place all the active objects at the front of Old generation
     
     ---------------------------
     
  2. Parallel Garbage Collection (Default Java 7)- 
     The major difference b/w the Serial and Parallel Garbage collection is-0
       In Serial Garbage Collection algorithm only single threads performs job
       In Parallel Garbage Collection multiple threads performs the garbage collection activity
  
  
    What it does?
    Minor Garbage Collection-
      * It moves all the Objects from Eden space to S1
      * It moves all the Objects from S0 --> S1
      * Finally Eden and S0 is empty 
      * Represent S1 as S0 
      
      
    Major Garbage Collection-
      * Moves Everything from Young generation to Old generation
      * Objects in Old generation are active will be retained and others will be sweeped
      * The rest of memory Young generation and inactive Objects without references will be removed from the memory

    ------------------------------
    
    3. Concurrent Mark and Sweep Garbage Collection algorithm (CMS)-
      
      What is different from Others?
        * The CMS stops all the threads during minor GC for Initial Mark
        * It uses multiple threads for GC to collect the inactive references
        
        ** During Full GC, 
          * The application threads are not stopped
          * Uses multiple threads for Garbage collection in parallel to application running
          
          
       What do you achieve? - a low pause collector
         No more long pauses associated with the garbage collection
         
        
      Minor or Young generation Collector?
        * Similar, to GC of parallel collector where multiple threads work 
         - Empties the Eden space
         - Empties one of the Survivor space
         - Move the Objects to Old generation
         
       Major or Old Generation Collector?
         The CMS algorithm runs a concurrent cycle to clean inactive references from Old generation space
         
         a) Initial Mark: All the application threads are stopped,  all the GC root Objects in the heap have been searched
         b) Concurrent Mark phase: 
           While application is running, all the active Objects have been marked.
           It is not guranteed to Mark all the Live Objects because the Object graph has been modified in parallel to GC execution
           
         c) Remark: Live Objects are looked for that were missed during phase two
            Multiple threads execute the phase to complete it efficiently
            
          d) Concurrent Sweep - 
            The marked Objects have been sweeped from the memory without stopping the application
            
            
      ----------------------------------
      
     4. G1 (Garbage first Collector) [Default Java 9]- 
        To Overcome the issues with CMS collector- (since JDK 7 update 4)
        
        What do you acheive?
          - Efficiently collect large heaps
          - Can collect both Young and Old generation heaps
          - It works concurrently with the application threads
          - It supports String deduplication
          
          
        What is G1 - Heap Structure?
          . Partition the heap into equal sized regions
          . These Heaps spaces can be marked as, i.e. each region can be marked any of the mentioned types -
            Eden
            Survivor
            Old

          . Regions belong to Eden, Survivor, Old types can be distributed across the total heap space
          . The Total region size is defined when the JVM starts
          
          . Another region "humongous region", where Objects are allocated  -
             - With 50% size of a single region
             - With space requirement more than a particular region provides
            
            Humongous regions are allocated directly as Old generation
            They are allocated contiguosly 
            If Space if left in hungous region it get wasted 
            
            
     What do you achieve?
       Diving the Heap in different regions gives a great advantage to select where the garbage resides
       The Eden space is promoted during Minor garbage collection
       
    How it does the Garbage Collection? Phases ---
    
    a) Young Generation or Minor Garbage Colleciton:
      . Object is created on Eden space
      . When the region is completly occupied, a new region is allocated and filled
      . This continues until Cumulative Eden regions have been filled
      . Once Eden regions are filled an evacuation pause has been triggered
      
      * The Cumulative Eden space defines number of  regions can be collected within Evacuation pause
      - The Cumulative regions is 5% - 60% of total heap 
      - is adjusted based on the peformance of previous young generation collection
      
    During the Young generation Collection?
      * Stop-The-World pause occurs - All application threads are stopped
      * Live Objects from Eden are promoted to Survivor
      * If Survivor space is full, these are directly promoted to Old generation
      * Live Objects from Survivor space which are Old has been promoted to Old generation
      
      
    b) Concurrent Marking Cycle: (along with Young Collection)    
      This phase has been initiated when -
        Old region account for more than 45% [default] of total heap
        This phase has been started with Young generation collection
        
      what does Concurrent Marking cycle does?
        **) Initial Mark - To take the advantage of Stop-The-World phase when initiated with Young generation collection
          Scans all the root Objects and mark all the live Objects
        **) Remark - It tracks all the references and marks the live Object (faster than the CMS algorithm)
        **) Clean up - Peforms clean up on live Objects and free regions
        
     
     c) Mixed Collection :
        This is initiated Once the Concurrent Marking Cycle has been completed
        It perfoms series of quick mixed Collection activities 
        
      What Mixed Collection does it?
        - Live Objects from Young and Old regions are evacuated and compacted to new unused regions
        - The Mixed Collection will Collect all the marked regions 
        
        - Once Mixed Collection has been completed, G1 starts the regular Young generation #a
        
     d) Collection Humongous regions:
       These regions are reclaimed only after "Concurrent Marking Cycle - Cleanup phase" 
       or
       During Full GC if they become unreachable 
       
       - These regions never move, not even during Full GC
       
       Issues -
         this causes premature slow  Full GC's 
         Unexpected OutOfMemoryError with lot of space left as fragmented regions
         
         
    Note: G1 - Garbage First Collector tries to avoid Full GC
    
 ==============================

Wow! Can You select a GC for me?
  -XX:+<TYPE>
   
   1) UseSerialGC
   2) UseParallelGC - To use Parallel GC on Young generation and Old generation will use Serial GC
   3) UseParalleOldGC - to Use parallel GC on both Old and Young generation
   4) UseConcMarkSweepGC - CMS garbage collector
   5) UseG1GC -  Default Java 9

==================================

Modules in Java 9-
  Q1. Can we run a project which is non-modular in Java 9?
   a non-modular application using libraries is placed in the classpath, 
   the module system automatically puts everything together into a single module called the "unnamed module."
   
   
  Note: The Unnamed Module -
          exposes all its packages 
          Has access to all the exposes components of every module
          This has access to platform modules
          
          
   Q2. Can a Modular project access the non-modular Library?
     When the libraries are available in class path but to use these libraries it must be available to modular project.
     
     the libraries in the classpath become part of the unnamed module which cannot be referenced. 
     Hence, a modular application cannot access the unnamed modules explicitly.
          
     Solution#
       The Modular project can put libraries in "Modular Path" instead of classpath. Such modules are called Automatic Modules
       
   Q3. What are the names for Automatic Modules?
     Removes .jar extension
     removes version string
     Non-alphanumeric characters like '-' are replaced by a dot '.'
          
     For example, 'log4j-api-2.8.2.jar' gets the module name 'log4j.api'.
     
     The name and description of an automatic module can be generated from a JAR as below: 
     jar -d -f <jar file>
     
          
   Q4. Can you tell me accessibilty of automatic Module?
     It 'requires transitive' all the modules (application modules, platform modules and other automatic modules)
     It exports and opens all its packages
     It reads the unnamed module (to fulfill their own dependencies on other non-modular libraries)
     
     
     The accessibility is only provided -
       * help in using a non-modular JAR with the least restriction until it gets a modular update. 
       * third-party JARs required for the automatic modules 
          which cannot be converted to modules can still be placed in the classpath as part of the unnamed module.
          
      Problem with Automatic Modules -
              If multiple JARs in the module path have the same package, it will lead to split package case and cause error.
          
      -p or --module-path : to provide module path
      -cp or --classpath : to provide libraries in classpath
      
      
    Q5. Can we have a multiple release Jar?
      o retain code compiled from previous Java versions, 
      Java 9 can create multi-release JARs containing the Code for Older Java versions as well as the new Java 9 code. 
    
     * MANIFEST.MF file which includes the entry Multi-Release: true in its main section, 
     * the META-INF folder of this JAR contains a 'versions' sub-directory 
      integer-named sub-directories (starting with '9' for Java 9) contain version-specific classes and resources.
    
      JAR Root
       Common.class
       VersionSpecific.class
       META-INF
          MANIFEST.MF
          versions
             9
                VersionSpecific.class
             10
                VersionSpecific.class
    Java 8 will use Common.class and VersionSpecific.class file in the root folder, and ignore the rest. 
    Java 9 will use Common.class from the root folder, and VersionSpecific.class from versions/9 folder. 
    Java 10 will use VersionSpecific.class from versions/10 folder.
    
    
   =====================
   Unamed Modules--
   
    1. It doesn't have module-info.java
    2. It requires all other modules
    3. It exports all its packages
    4. The classes written in Old Java version becomes part of Unnamed modules
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
          
          
          
          
          







