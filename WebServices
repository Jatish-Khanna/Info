
A software system that is designed to support inter-communication over network

 - These services mostly communicate over HTTP
 - These services can be running on diverse s/w and h/w platforms
 - Main benefits include interoperatibility and extensibility 
 - It could be component or an aggregator in the E2E request flow
 - It supports Single Responsibility and reusability
 
 
 Webservices-
 
 . SOA - Service Oriented Architecture (designed, developed and accessed using standards) 
  - usually uses SOAP (Simple Object Access Protocol)
   It is a strongly types messaging framework that relies on XML and schemas
 
 1. SOAP based services-
    a) Discovered - UDDI (Universal Description, Discovery and Integration) - is a registration services to register/discover
    b) Described - WSDL (Web service description language) written in XML
    c) Accessed - SOAP - An XML template that defines information exchange and message format
    
    All supported by XML schemas
  
 2. ReSTful - Representational state transfer ()
  Requesting a resource over web does mean either 
    . Retrieve the current state of an Object
    . Retrieve the update state of an Object by proposing change (update, delete)
    
    
SOAP and ReST - both provides the support to access resources over n/w

 . SOAP is a protocol that defines that message exhange definition i.e. Describe and Access over n/w
 . REST is an architecture that access resource over n/w using HTTP

 . SOAP can utilize other layers like transport (SMTP, FTP ...)
 . REST is based on HTTP
 
 . SOAP - Request from client has an additional overhead of processing at client and server
 . REST - Can directly send data, no need to wrap any data 
 
 
 . Service contract is defined using WSDL
 . REST - Service contract can be defined using WADL (Web Application Description Language) only if required



REST principles:
 1. Uniform interface - 
   . An API interface to be finalized which will be exposed to all the customers
   . Any single resource should not provide all the information at once
   . A relevant URI - HATEOS referring to other related resources
   . Once a developer is familarized with the approach it should be applicable to similar resources provisioned by webservice
     
   
 2. Client-Server
  . Servers and client can be developed independent of each other, as long the interface is not altered
 
 3. Stateless
  . No context should be stored on the server
  . The client is responsible for maintaining the state of application
  . When a client received an session from the server, all the following request should contain Authentication and Authorization info.
 
 4. Cacheable
  . Well managed cache partially or eliminates client-server communication
  . Further improves the scalability and performance
 
 5. Layered subsystem
  . REST allows to builds layered subsystem where aggregators, orchestrator and specific services provide response
 
 6. Code on demand (Optional)
  . At times required to recieve executable code as reponse from the service and is acceptable
  
  Note: 
   All of the above principles help you build a RESTful API. A times one or more principles have been violated
   but it is not true RESTful but considered as RESTful API



HTTP PUT and PATCH
. Both are used to modify data at the server end

- PUT : Is used when entire data has to be replaced corresponding to unique ID
- PATCH : is used when a set of instances to be updated under the corresponding Object represented by unique ID

Note: There is no annotation like @PATCH does mean it has to be custom created




===========================

Custom Exception handeling

* Exception Mappers - These are the custom classes that catch custom application exception and return HTTP response to client

These are the classes annotated with @Provider annotation
- implement ExceptionMapper interface

When an exception is thrown an ExceptionMapper finds the assocaited HTTP response to handle it.

An Example of implementing ExceptionMapper

@Provider
MyCustomExceptionMapper extends ExceptionMapper<ContraintViolationException> {

 @Produces(MediaType.APPLICATION_JSON)
 public Response toResponse(ConstraintViolationException e) {
  //build the application response using ResponseBuilder
  Response.setStatus(400)
          .entity("<Error>Parsing the client input</Error>").build();
 }

}








