Why Microservices?

  . Simple
  . Reliable
  . Scalable
  . Resilient
  . Faster to develop and deliver
  . Multiple technology stack
  . Multi interfacing
  
  
Why API gateway?

An API Gateway is the element that coordinates and orchestrates how all the requests are processed in a Microservices architecture, and this also includes to the Serverless model.
 An API Gateway includes an HTTP server where routes are associated with a Microservice or with a FaaS function.
 When an API Gateway receives a request, it looks up for the Microservice which can serve the request and delivers it to the relevant part.
 It maps the request parameters to the input arguments of the service or function if necessary, in order to complete the start of the request.
 Then, it gets the result that the function got to the request into an HTTP response and returns it to the original caller.


  . Simple entry point & 
  . Security
  . Dynamic service discovery
  . Circuit breaking
  . Abstracting the overall architecture
  . Traffic control




Cloud native applications-
  . Load balance the instances of single service
  . Are services resillient if application has been failed
  . Benefit of scalability, and how to share the configuration b/w these common instances?
  . How to know where services are hosted on cloud - the port and host name
  . How to avoid duplication of common configuration?
  . how to trace the flow b/w the microservices?


==========================

Solution# to problem - when microservices are scaled, how they should share the common configuration 


          VCS(Git) ---------------> ConfigServer
                                      |||||
                                ==================
                                  Microservice-#1
                                  M-#2
                                  M-#3
                                  ...
                                  M-#n
                                  
     Key takeaways-
      . All the configuration details are stored in git
      . All the microservice connect to config server and load the common configuration
      . Git will also manage microservice specific configuration file (dependent configuration)
        [Create separate properties file for each microservice with name of the 
        file matching the" spring.application.name" of the service]
        
      . SpringCloud dependecy
       <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-config-server</artifactId>
       </dependency>
      
      . @EnableConfigServer annotation in the application file of config server
      
      
      --
      Restart all the services and enjoy Solution# - Store and load the configuration from ConfigServer
      
      
  ==============================    

Solution#2 - Load balancing between scaled applications

  - An external loadbalancer can be requested in front of instances
  - The above load balancer decides to f/w request b/w scaled services hosted on machinces is called as Server-side loadbalancing
  
  Issues with Server-side loadbalancing:
    This is single point of failure if load balancer fails then we do not have access to any of instances
    - For multiple such microservices which have multiple instances running a collection of LB's to be maintained
    - Every hop in the n/w increases latency 
    
    
    What can be done?
     How about Client-Side load balancing
      - Here client will decide to whom the quest will be sent to
      - The client side load balancers are usually s/w load balancers
      
      Problems with Client-Loadbalancer?
        - The client is managing another cross-cutting concern of load balancing 
        
        Example- Netflix OSS : Ribbon a client side load balancer
        
    How to do?
      1. Add dependency
        <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-ribbon</artifactId>
        </dependency>

      2.Create bean -
        @Bean 
        @LoadBalanced
        public RestTemplate restTemplate() {
          return new RestTemplate();
        }

    3. Add ribbon annotation
      @RibbonClient(name="<CUSTOM_NAME>")

    4. Add properties  
    <CUSTOM_NAME>.ribbon.eureka.enabled=false
    <CUSTOM_NAME>.ribbon.listOfServers=http://localhost:8081,http://localhost:8082
    
    
    5. Request the JSON from object
      List<T> result = restTemplate.getForObject("http://<CUSTOM_NAME>/URI/", List.class);
    

Problems with above method=
    . Hardcoded instance as a part of ribbon list, creates dependency 
    . If one of instances fails then request still goes to instances and it will fail - i.e. NoOpPing strategy
     Solution -
      <CUSTOM_NAME>.default.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
    
==============================================    

Problem#2.B - Service discorvery if in scalable instances we need to add/or remove or update connection details
    . updating each time configuration on multiple microservice is cumbersome
    . If you use Cloud ConfigServer even then we posses issue as new node would only be reflected after each service restart/refresh
    . Each microservice may need a restart
    
    Solution:
      . Register service with the central regirsty once started
      . Provide/store details at central registry
      . The new services are ready to be discovered by clients
      
      Example of Central Service registry:
        . Netflix Eureka
        . Zookeeper
        . Consul
        
        
    How to do it?
      1. Update the details of Euraka or Central regirsty in Git
      2. Spring CloudConfig will be used to load the configuration of regirsty from VCS
      3. While starting microservice, register itself with the Central Registry
      
   Code it--
    1. Create an application with Central regirsty 
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-eureka-server</artifactId>
      </dependency>


    2. Configure Central registry application-
      spring.application.name=<REGISTRY_NAME>
      server.port=<PORT>
      
      eureka.client.fetch-registry=false
      eureka.client.register-with-eureka=false
      eureka.client.service-url.defaultZone=http://localhost:<PORT>/eureka

    
    3. In the main file, annotate with @EnableDiscoveryServer
    
    
    
    On Clients:
     1. Add the annotation to register with the discovery client
     @EnableDiscoveryClient
     
     2. Access the loadbalanced instance
     
    @Autowired
    private DiscoveryClient discoveryClient;

    @RequestMapping("/service-instances/{applicationName}")
    public List<ServiceInstance> serviceInstancesByApplicationName(
            @PathVariable String applicationName) {
        return this.discoveryClient.getInstances(applicationName);
    }
    
==================
  Problem#2.C - Still we need an iterable to decide whcih instance where request will be sent
      . It can be biased based on programming practise
      
      Solution Use @Loadbalanced rest template along with @EnableDiscoveryClient annotation
      
      
      On client:
       1. Annotate with
       @EnableDiscoveryClient
       @EnableRibbon
       
       2. Access each instance using "spring.application.name" using restTemplate
       
       restTemplate.getForObject("http://<SPRING_APP_NAME>"+"/service/, Service.class);
       
      3. Each instance should have unique instance Id
        eureka.instance.instance-id=${random.value}
        
        Only required when ${PORT:0} has been used
        As each instance will override instance ID registered with EurekaServer ending up being only single instance LB



----------------------
Create Eureka clusture:
    
   1. Configure each Eureka server with the default Zone
    eureka.client.service-url.defaultZone=http://eureka2host:8002/eureka,http://eureka3host:8003/eureka
  
    ... for other Eureka servers

   2. Update the properties 
   
   eureka:
  instance:
    hostname: eureka1host
  client:
    registerWithEureka: true
    fetchRegistry: true 


  3. For all the clients
  eureka.client.service-url.defaultZone=http://eureka1host:8002/eureka,http://eureka2host:8002/eureka,http://eureka3host:8003/eureka




=================

Patterns - 
  1. Service discovery pattern - where all the registered services at the central control defines the instance serving request
  2. Circuit-breaker pattern - when one of the service fails to stop propagating and impacting other services with
                               for cascading failures
  3. Fallback pattern - when the circuit is open due to failure, the request will fallback to Exceptional handler flow
      . In case of error in service
      . In case of timeout in service
      . In case of Open circuit
  
  4. API gateway pattern - The API gateway server act as 
  	Orchestrator, 
	aggregator, 
	request/response formatter
	Intelligent routing
	Handling request from different sources or client types
	Protocol transalation
	Security
	Loadbalancing
  	that handles all the traffic b/w server and client without transperancy
	
  
====================

Implementing Circuit breaker -
    1. Hystrix -dependency
    <dependency>
              <groupId>org.springframework.cloud</groupId>
              <artifactId>spring-cloud-starter-hystrix</artifactId>
        </dependency>



    2. Annotation to enable the circuit breaker pattern
      @EnableCircuitBreaker
      
    3. Annotate a service method with the fallback command
      @HystrixCommand(fallbackmethod= "<NAME_OF_FALLBACK_METHOD>")
      
      
    4. Define a fallback method WITH THE SAME SIGNATURE
      
    5. General properties to setip Hystrix
    
    // At least five request should be sent
      hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
      // After 10 seconds the circuit will again be closed by Hystrix
      hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=10000
      // Within 10 seconds minimum of five request to be sent
      hystrix.metrics.rollingStats.timeInMilliseconds=10000
      // Minimum of 50% request should fail
      hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
    
    
    NOte: If the circuit is Open and after sleepWindow it closes and got the first invalid request 
    then Hystrix will again Open the circuit for rollingStats time span

    
 ====================
  Aysnchronous Communication using Hystrix-
    
    1. Hystrix method for Asycn communication
    
    public Future<T> getDataById(int id) {
		return new AsyncResult<T>() {
			@Override
			public T invoke() {
				return template.getForObject("http://<HOST_NAME>"+"/service/"+id, T.class);
			}
		};
	}
    
    2. Get the result once Callable or Future has the value
    Future<T> getFuture = serviceClass.getDataById(id);
    System.out.println(getFuture.get());
    
    
=======================
Reverse Proxy-

	As the external interface doesn't know about the deployed applications/microservices
	.  An API gateway will handle all the request from external systems
	. It forward request to respective microservice
	. The discovery of service has been completed using Central registry like Eureka
	. The gathering, aggregating, formatting, orchestration has been done by API gateway
	. No static API service information is required for client
	. 

Example Zuul an API gateway

	1. Add dependency
	<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
</dependency>

	2. Add annotations
	// To enable API gatewat patten and request routes will be defined
	@EnableZuulProxy
	// To find the API services registered with Central registry
	@EnableDiscoveryService


	3. Add API gateway proxy routes
	Routes can be added using the zuul.routes.<routeName>.path=/<URI> and 

Zuul definition
"""

	// This defines the Service ID registered with Eureka or Central service registry
	zuul.routes.<routeName>.service-id=<ServiceName> . 
	
	Example-
	Call a microservice using Zuul, It will strip all the context which add repetition
	
	http://Zuulhost:8080/service/service/id
	
	The Zuul will strip the first "service" context which add confusion. by disabling with the below strip-prefix option
	New URI would be like
	
	http://Zuulhost:8080/service/id
	
	Note:  zuul.routes.<routeName>.strip-prefix=false - to avoid repetition in the path
	
	OR
	
	shorthand 
	zuul.routes.<DISCOVERY_SERVICE_NAME>.path=/uri/**
"""	
	
	- Wild card can be used as request matchers
	- /uri/** - anything after the /uri
	- /uri/*/service  - any text b/w uri and service

// Provide the information of Central registry
	eureka.client.service-url.defaultZone=http://localhost:8081/eureka


Benefits of Zuul Gateway-
	1. It uses Ribbon i.e. automatically balances the load b/w service instances
	2. Zuul automatically configures Hystrix-
		i.e. Fallback routes can be defined to implement FALLBACK PATTERN






