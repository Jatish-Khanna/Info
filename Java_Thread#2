Executor an interface that represents Object that executes task

Example of an Executor --

public class SimpleExecutor implements Executor {
    @Override
    public void execute(Runnable runnable) {
        runnable.run();
    }
}


#2 ExecutorService
 A service for async processing of tasks
 It requires a pool size at the time of creation of ExecutorSerive
 
 Example-
 Executors.newFixedThreadPool(1);
 newSingleThreadExecutor
 ...
 
 
#3 ExecutorService termination

  shutdown(); - waits until all the task has been completed successfully
  shutdownNow()  - immediately terminates all the task
  awaitTermination(long timeout, TimeUnit unit)  - blocks until all the threads have completed execution or timeout specified
  
  
  
#4 ScheduledExecutorService 
  to perform task preodically
  
  Example-
  ScheduledExecutorService scheduledService = Executors.newSingleThreadScheduledExecutor();
  
  scheduledService.scheduleWithFixedDelay - after initial delay and then fixed delay after completion of task
  .schedule - to schedule after time
  .scheduleAtFixedRate - after initial delay and then after fixed delay rate
  
  
  #5 Synchronization-
    It uses intrinsic lock or monitor bound to an Object. All synchornized block over the Object can be accessed by single thread
    
    a) Instance method-
      public synchronized void syncMethod() {
      
    b) Static method -
      public synchronized void staticSyncMethod() {
  
      Methods synchronized on the Class object associated with the class
      As only single class Object exists per JVM, only one thread can execute these static methods, irrespective of no. of Objects
      
      
    c) Block sync-
    Not the entire method but a block of code
    Only one thread per monitor object can execute the code block
    public void blockSynch() {
      synchronized (this) {
  
    For static methods-
    public static void staticBlockSync(){
      synchronized (StaticMethodClass.class) {
  
  
============================
Each thread works over its own memory; each location holds a copy of data in the memory
When thread execution is complete, the data is copied back to Main memory which is shared among the Other threads

ThreadSynchornization requires-
  - Mutual Exclusion -
    Only single thread allows to execute critical section
  - Visibility - 
    Changes done by One thread are available to Other thread

- volatile : directs your thread to get the data from main memory for each read/write operation
  This only provides Visibility but mutual exclusion

  It should be used when next value of variable is dependent on previous value
  Still a race condition can occur with -
    A state thread updated value but not written yet to main memory
    At same time other threads reads a stale value
    **No Synch gurantee**
    
    
Use Atomic from the concurrent API to achieve thread syncronization or Mutual execlusion
    
 =============================
 wait() - releases the lock on Object inside synchronization block, to allow other thread to acquire it
            notify(), notifyAll() [for all the threads in waiting state], both should be called from Synchronized context
            
 sleep() - Static method and can be called from any Context, pauses the current thread
            Thread started after the specified interval, or it is interrupted
            ** No locks releases with sleep() **
  
  
  
  =========================
Future - represents the future result of async processing once it is complete
Callable - Overrides a call method that represents task and returns result from future

  isDone() - to verify if task has been completed
  get() - to fetch the Future result
  cancel() - to cancel the running task, calling get after cancel with throw CancellationException
  
  
ForkJoinPool - an abstract class implements Future, it is capable of executing large number of threads
        - calls fork() to create subtask of single task
        - calls join() to join the result of all the subtask
        
Implementation of ForkJoinPool -
 a) RecursiveTask - returns a value on completion
 b) RecursiveAction - doesn't return anything

==========================

CompletableFuture -implements Future and CompletionStage() interface 
CompletionStage - to define a contract how asynch computation step can be combined with Other steps
            CompletableFuture<String> completableFuture 
                                         = CompletableFuture.supplyAsync(() -> "Hello")
                                           .thenCompose(s -> CompletableFuture.supplyAsync(() -> s + " World"));
 
            assertEquals("Hello World", completableFuture.get());

thenCompose() - method receives a function that returns another object of the same type.


    CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> "Hello")
                                                    .thenCombine(CompletableFuture.supplyAsync(
                                                    () -> " World"), (s1, s2) -> s1 + s2));

thenCombine - execute two independent Futures and do something with their results
thenAcceptBoth  - with two Futures‘ results, but don’t need to pass any resulting value down a Future chain
    
    CompletableFuture future = CompletableFuture.supplyAsync(() -> "Hello")
                                .thenAcceptBoth(CompletableFuture.supplyAsync(() -> " World"),
                                (s1, s2) -> System.out.println(s1 + s2));


thenApply - return type wil be combined result of two calls
thenCombine - it will flatten and return a future result directly

CompletableFuture.allOf()  - static method allows to wait for completion of all of the Futures provided as a vararg
            result is a CompletableFuture<Void>. 
                    The limitation of this method is that it does not return the combined results of all Futures. 
                    Instead manually get results from Futures.

CompletableFuture.join()  - method is similar to the get method, 
            but it throws an unchecked exception in case the Future does not complete normally. 
            This makes it possible to use it as a method reference in the Stream.map() method.

===============================
Handle error CompletableFuture -
  .handle method accepts two arguments-
   * Succesful return after completing task
   * Error while processing task

CompletableFuture<String> completableFuture  
  =  CompletableFuture.supplyAsync(() -> {
      if (name == null) {
          throw new RuntimeException("Computation error!");
      }
      return "Hello, " + name;
  })}).handle((s, t) -> s != null ? s : "Hello, Stranger!");

  
OR

Thow error instead of handling gracefully

completableFuture.completeExceptionally(
  new RuntimeException("Calculation failed!"));
 

============================

Stopping a thread-

public class ControlSubThread implements Runnable {
 
    private Thread worker;
    private AtomicBoolean running = new AtomicBoolean(false);
    private int interval;
 
    
    // Utility to interrupt the running thread
    public void interruptThread() {
        // Atomic value to false - means interrupt flag is set
        running.set(false);
        // If The running thread is sleeping for long time - 
        // Interrupt the sleep operation with interrupt() call
        // Sleep will throw InterruptedException
        worker.interrupt();
    }
 
 
    @Override
    public void run() {
    //
        running.set(true);
        // Atomic flag to exit the thread
        while (running.get()) {
            try {
            // Long sleep interval
                Thread.sleep(interval);
            } catch (InterruptedException e){
                Thread.currentThread().interrupt();
                System.out.println(
                  "Thread was interrupted, Failed to complete operation");
            }
 
        }
    }
}





