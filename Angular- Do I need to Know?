Opensource JavaScript framework to create single page web application.

 - Different views will be rendered on single page
 -----------------------
 Why Sinlge page?
  To efficient load web pages for clients (mobile and web)

-----------------------
TypeScript - A Microsoft extension for JavaScript that supports OOP features and has strong typing system which enhances the productivity
  - Type script has been convereted to Javascript with tools like npm, gulp...
  
  Why because all the browsers support -> ES5(ECMAScript 5 i.e. Javascript).
  
  .ts ----> transpiler ------> .js
  -----------------------
  
  Angluar follows component-based programming.
  All Angular libraries have been created as node modules. So a prerequisite for Angular.
  
  1. Install Node
  2. Install Angular CLI
    ng v ---> to check version
  
  3. Install Angular for project folder
  
  -----------------------
  @decorators - begins with @ symbol, to add meta data for the class
    Angular has lot of built in decorators
    E.g. @Component - mark the class as component
    
    @Component({
      selector: 'ComponentName',
      templateUrl : '',
      styleUrls : ['']
    )}
  
  lite-server - node.js application server
  
  -----------------------
  1. Create COmponent -  ng generate component <COMPONENT_NAME>  
  
  -----------------------
  Directives in Angular ?
    To change the behavior or extend the functionality of HTML using Angular
    E.g. - <p *ngif="<CONDITION>" > </p>
    
    This will render when condition returns true
  
  1. Component Directive : These can be used as tags
  
  
  2. Structural Directive : These can be used as an attribute in tags
   Change the DOM layout by adding or removing the DOM elements
   ngif
   ngFor
   ngSwitch
   
   Note: these directive start with "*" character
   
   E.g. - <p *ngif="<CONDITION>" > </p>
   
   <p *ngif="submitted"> Display this paragraph </p>
   
   app.component.ts
   export class AppComponent {
    boolean: submitted
   }
   
   
   <ul>
    <li *ngFor="let user of users"> {{user.name}} </li>
   </ul>
   
     
   *.ts
   export class AppComponent {
     users : any[] {
      [name : "Jatish"].
      [name : "Jatish Khanna"]
     }
   }
   
   <li *ngFor="let user of users; index"> {{index}} </li>
   <li *ngFor="let user of users; let localIndexVariable = index"> {{localIndexVariable} </li>
   

  3. Attribute directives:
     Replacement of Style Binding where it will reduce the code
  
    ngStyle: To bind CSS style using Angular
      <div [ngStyle]="{
       'background-color':colorNameFromTypeScript,
       'color':color
      }">
      ...
     </div>
  
  
  ngClass: To bind CSS class using Angular
  
  <div [ngClass]="{bordered: isBordered}">
  ...
  </div>
  
  
  -------------------------
  Style Binding: 
    <div [style.background-color]="<bindingName>">... </div>
  
  More CSS classes to be applied then it would be an issue, use Attribute directive
   <div [class.boredered]="isBordered">
   ...
   </div>
  
  Event Binding:
    <button (click)="onClickMethodInTypeScript()"/>

-------------------------

Data binding in Angular?
  1. One way data binding -
    data flows only in One direction
    E.g. Interpolation - to fetch the properties from the class
    
    a) Class to Template - The data is moving from Class to View
     . Interpolation
     . StyleBinding
     . ClassBinding
     . Property Binding
       E.g. <img [src]="imageVariableStoresPath" ...> </img>
       
    
    b) Template to Class - Event binding , the data is going from View to Class
      <button (click)="onSubmit()">Submit Me for send data </button>
    
  2. Two way data binding
    Should always include FormsModule in TypeScript
    <input type="text" [(ngModel)]="name" />
    
    
  -------------------------
  Pipes - format the data before displaying on screen
     name: string = "Jatish"
    E.g. {{ name | uppercase }}
    
      Output: JATISH

   Pass parameter to Pipe
     {{1000 | currency:"CAD"}}


Custom Pipe-
  ng generate pipe <PIPE_NAME>
  
  It will generate two files in Module directory
  <PIPE_NAME>.pipe.ts
  <PIPE_NAME>.pipe.spec.ts
  
-------------------------
Load a Sub component in Root component using Angular

@Component 
 selector defines the name of component to be used in .html to include other component
 
 The COntainer component will load all the other Components using the name defined in Selector

-------------------------
Component Communication-

 a) Pass data from Container to Child:
   Using property binding as below
   <app-any-name-custom-tag [bindingVariableName]="angularVariableName">... </app-any-name-custom-tag>
   To recieve the value in child component use-
   
   @Input() set bindingVariableName(variale : string) {

   }
   
  provides information to Angular that, the value will be recieved from Other component
 
 b) Pass data from Child to Container component:
   The data can only be passed using an event 
   @Ouput decorator - defines the value will be sent to other component
   
   The output can only be of type Event created an Object using EventEmitter
   // Step - 1 in child component
   @Ouput onRegister = new EventEmitter<string>();

  // Step - 2 trigger the event from UI calling the method with an argument
  register(name : string) {
  // Start sending the event
    this.onRegister.emit(name);
  }
 
  // Step - 3 Receive the value in UI with the registered event
  <app-any-name-custom-tag (onRegister)="displayMethod($event)">... </app-any-name-custom-tag>

  $event - Stores all the parameters and metadata about the event
  
  // Step - 4 process the data in displayMethod of component
 
 
 Note: $event can recieve only single value for multiple values use any or Object or array
 

-------------------------
Forms-
 1. Template driven forms - the data binding and validation in the HTML forms
  Issues with -
  . Readability - databinding and validation all part of HTML
  . Unit Test validation - the test can only be done using browser instead of Coding Unit test
 
 <input type="text" [(ngModel)]="modelVariableName">...</text>
 
 2. Reactive Forms or Model driven forms - 
   . Data binding and Validation can be written in the component class
  
  How you do it?
    class -> formObj --> dataBinding + validation
    FormBuilder - to create an Object in the class, using service class
    
    
  Can you COde it?
  
    export class RegistrationForm implements OnInit {

      registerForm : FormGroup;
      contructor(private formBuilder : FormBuilder){}
      ngOnInit() {
       this.registerForm = this.formBuilder.group({
       // Multiple validators in []
         firstName : ['', [Validators.required, Validators.maxLength(10)]],
         address : this.formBuilder.group({
          zip : string
          ...
         }),
         
         email : ['', validateEmail]
         
       });
      }
      
    }

The mapping in angular

<form [formGroup]="registerForm">
 <input type="text" formControlName="firstName" />
  <p *ngIf="registerForm.controls.firstName.errors">Field has error</p>
  <p *ngIf="registerForm.controls.firstName.errors?.required">This field is required</p>
 <p *ngIf="registerForm.controls.firstName.errors?.maxLength">MaxLength should be 10 chars</p>
 
 <fieldset formGroupName="address">
  <input type="text" formControlName="zip" />
 </fieldset>
 
 
 
 <input type="submit" (click)="submit()">
</form>

----------------------------
Custom Vaidator-

  function validateEmail(componentValue : FormControl) {
    return emailvalid : { valid : true};
  }

Either should return null or emailvalid : { valid : true};

 <p *ngIf="registerForm.controls.email.errors?.emailValid" > Email is invalid </p>
 
 ----------------------------
 
 Services - a class used to share data across independent components not like Container and child relationship
   - it is a singleton object
   
   1. Create Custom Service class?
     ng generate service <SERVICE_CLASS_NAME>
     
     files generated will be 
      <NAME>.service.ts
      <NAME>.service.specs.ts
 
 
   @Injectable({
   // With this it should not be added to providers: "" section in Component class
    providedIn : 'root'
   })
   export class CustomProvider {
   
   }
 
   
  export class CustomComponent {
  
   // Only way to use the Custom services
   constructor(customService : CustomProvider);
  }
 
 ----------------------------
 implements OnInit - to extend the functionality by initializing stuff once the class is loaded
  ngOnInit() {
  
  }
 
 ----------------------------
 
 Server Communication -
  1. Fetch data from Server using built in Service Class - HttpClient
  
  constructor(private httpClient : HttpClient) {}
  
  getDataFromServer : Observable <ModelClass[]> {
   return this.httpClient.get<ModelClient[]>(this.baseUrl)
                                      .pipe(
                                      tap(data => Console.log(JSON.stringify(data))),
                                      catchError(this.handleError)
                                      )
  
  
  }
 
 private handleError(httpErroResponse : HttpErrorResponse) {
  let errorMessage = httpErrorResponse.error.status
  
  // This will be handled by Component, as Services are not supposed to handle the error either Client or Server side
  return Observable.throw(errorMessage);
 }
 
 
----------------------------

Routing - Navigation from One component to Other or map URL to respective component

const appRoutes : Routes = [
 {path : 'dashboard', component : DashboardComponent},
 // default path
 {path : '', redirectTo : '/dashboard', pathMatch : 'full | prefix'},
 ...
];














