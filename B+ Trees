B+ trees is an extension of B trees. It allows efficient operations-
  - Insertion
  - Deletion
  - Search 
  
The records are stored at leaf nodes
The keys are stored as internal nodes

  How search is efficient -
    All leaf nodes are linked together as single LinkedList, that makes search more efficient
    
  Note: B+ trees can store large datasets which may not fit into PRIMARY memory
    Redundant search keys can be present in B+ trees
    Deletion in B+ tree is easy compared to B trees where data nodes are only stored at leaf
 
These are optimized as to store -- 
  Keys in the main memory and records in the secondary storage
  
Good things- 
  . Height of tree remain balanced
  . B+ trees allows data access sequentionally (all leafs are linked as single List) and direct access
  . Keys are used for indexing optimize faster reads 
  
  
Here are some of the differences between B and B+ tree that I've come across:

In a B tree, search keys and data are stored in internal or leaf nodes. But in B+-tree, data is stored only in leaf nodes.
Searching any data in a B+ tree is very easy because all data are found in leaf nodes. In a B tree, data cannot be found in leaf nodes.
In a B tree, data may be found in leaf nodes or internal nodes. Deletion of internal nodes is very complicated. 
In a B+ tree, data is only found in leaf nodes. 

Deletion of leaf nodes is very easy as it can be directly deleted.

Insertion in B tree is more complicated than B+ tree.

B+ trees store redundant search key but B tree has no redundant value.
In a B+ tree, leaf nodes data are ordered as a sequential linked list but in B tree the leaf node cannot be stored using a linked list.
Many database systems' implementations prefer the structural simplicity of a B+ tree.


HDD internal storage?
  1. A HDD has multiple disks rotating and persist data for future use
  2. A disk has multple tracks which are circular in nature
  3. A disk has multiple sector - represents an area 
  
  4. The intersection areas of tracks and sector represents block in the disk
   These blocks can be accessed using (trackNo, sectorNo)
   We assume a general block size is 512 bytes
   
 5. Reading/writing on the disks has been in terms of blocks
 6. Each byte in the block has own address i.e. offset 
 (trackNo, sectorNo, offset) -> represents each byte on a disk from a particular BLOCK.
 
 Organizing the data in the main memory i.e. directly used by the application program is called as DATA Structures
 Organizing the data on the disk efficiently for easy access - DBMS

How Indexes help out? ---------> These are called dense indexes
  A reverse index is built for each key and respective record pointer represents the (trackNo, blockNo, offset) on disk
  The index size will be small, it optimizes the searched 
   - by not looking in all the blocks where data is stored
   - by only looking idexes and accessing the record pointer to block on disk
   
Multi-level Index? ----------> These are called sparse indexes
  If the index size is also growing with the larger data set.
  Decide what multi-level index will represent
  
  E.g. Each multi-level index will store the reference to block of records which represent block on disk,
  
  
The above discussion give idea to M-Way search tree-
  E.g. Binary search tree is an example of M-way search tree where M = 2
  
  Total Number of children = m
  Total Number of keys possible = m-1
  
  There can be 3-Way, 4-way... m-way search tree where m = number of children a particular node may have
    
 What is the problem with M-way search tree->
   The insertion process doesn't have any guidelines i.e. inserting n nodes in M-way search tree 
     may become skewed and all other operations will become O(N)
      
 B - Trees?
   The guide lines provided to insert, delete data in trees for M-way search trees
   So, B-Trees are M-way search trees with some rules
   
 1) Every node should be half-full i.e.
   ceil(m/2) -> every node keys
 2) Root can have minimum 2 children i.e. One key
 3) All leaf must be at the same level
 4) The creation process for B-Tree is bottom up
 
 A B-tree with m=4 means (It can have 4 Children and 3 Keys for a node)
 
 Note: B-Tree are like multi-level indexes whereas
   . Each node will have a child pointer
   . Each node will have a RECORD pointer
   
 B+ Tree -
   . All the non-leaf node will not hold RECORD pointer [Makes a sparse index]
   . All the missing keys can be redundant in children
   . There will be a sequentional link b/w all the child [Makes a Dense index]
   
   
   











