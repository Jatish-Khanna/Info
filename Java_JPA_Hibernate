JPA -
  
  @Repository
public class EmployeeDAOImpl implements EmployeeDAO {
    private EntityManagerFactory entityManagerFactory;
    @Autowired
    public void setEntityManagerFactory (EntityManagerFactory entityManagerFactory) {
        this.entityManagerFactory = entityManagerFactory;
    }
    
    
    - public void insert(Employee employee){
        EntityManager entityManager = this.entityManagerFactory.createEntityManager();
        entityManager.getTransaction().begin();
        entityManager.persist(employee);
        entityManager.getTransaction().commit();
    }
    public int delete(int empId) {
        EntityManager entityManager = this.entityManagerFactory.createEntityManager();
        entityManager.getTransaction().begin();
        int result=0; 
        try{
             Employee emp = (Employee) entityManager.find(Employee.class, empId);
             entityManager.remove(emp);
             result=1;
             entityManager.getTransaction().commit();
        }
        catch(Exception e){
             entityManager.getTransaction().rollback();
        }
        entityManager.close();
        return result;
    }
}



====================
HIbernate

@Repository
public class EmployeeDAOImpl implements EmployeeDAO {
    private SessionFactory sessionFactory;
    @Autowired
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
    public List<Employee> getAll() {
        Session session = sessionFactory.openSession();
        CriteriaBuilder builder = session.getCriteriaBuilder();  
        CriteriaQuery<Employee> query = builder.createQuery(Employee.class);   
        Root<Employee> root = query.from(Employee.class);  
        query.select(root);       
        List<Employee> empList=session.createQuery(query).getResultList();
        return empList;
    }
    public void update(int empId, String department) {
        Session session = sessionFactory.openSession();
        Transaction tx = session.beginTransaction();
        Employee emp = (Employee) session.get(Employee.class, empId);
        emp.setDepartment(department);
        session.update(emp);
        tx.commit();
        session.close();
    }



====================

SPing JPA data advantages and summary

  . The amount of coding is quite less when compared to Spring JPA/Hibernate
  . Common CRUD operations have been provisioned at runtime by Spring
  . For common requirements, @Query and @NamedQuery and @Param provides privilege
  . High consistency is achieved at data access level
  . Single interface to multiple underlinded DB's - NoSQL, SQL
  . Highly flexible to extend. Allows new methods to be defined and custom repositories
  . @ready avaiable readOnly transaction scope and can be extended easily to Read/Write transactional
  . @Modifying(clearAutomatically = true) to support transactional API
  . Paging and Sorting operations have been provided

======================

Object Relational Impedence Mismatch? when using JDBC

  Problem of Granularity - mismatch b/w Object and number of tables in DB
  Problem of Subtype - Inheritance is not present in DB
  Problem of Associations - Java represents has a relationship within Objects whereas RDBMS has concept of Foriegn Key 
  Problem of Identity - The Comparison of Instances is done using equals method, whereas RDBMS uses Primary key
  Problem of Navigation - Joins in RDBMS to get data for Object references and association whereas . operator in Java

---------------------------

Solution and Benefits?
  ORM - Object relational Mapping
  1. resolves ORM impedance mismatch
  2. Lower level interation with database
  3. ORM helps to get rid off SQL's
  4. ORM is database independent - 
  
---------------------------

JPA is a standard specification for ORM in Java, which resolves the issues of porting application within multiple ORMs
i.e. ORM implements JPA specifications

1. Classes - Tables
2. Fields - Columns
3. Instance - Record


----------------------------------

@Table, @Entity, @Column, @Id, @Transient, @Temporal(covert date to compatible date type)

----------------------------------

Hibernate Configuration?

1. Using XML - hibernate.cfg.xml
  <hibernate-configuration>
    <session-factory>
      <property name=""></property>
      ...
      
      <! -- class: attribute to be used if Configuration is done using - Annotations
         resource: attribute to be used if Configuration is done using - *.hbm.xml -->
      <mapping class="..." />
    </session-factory>
    
  </hibernate-configuration>
  
  
  Few properties to be defined -
    hibernate.connection.driver_class = "com.mysql.jdbc.Driver"
    hibernate.connection.url = "jdbc:mysql://localhost:3306/database"
    hibernate.connection.username = "root"
    hibernate.connection.password = "root"
    hibernate.dialect = "org.hibernate.dialect.MySQL5Dialect"

---------------------------------

Load the Configuration using Java application ?
  Configuration configuration = new Configuration.configure("hibernate.cfg.xml")

// If the configuration file is present in classpath, it will be loaded automatically


--------------------------------------

Java based Configuration?
  Configuration configuration = new Configuration();
  
    Few properties to be defined -
    hibernate.connection.driver_class = "com.mysql.jdbc.Driver"
    hibernate.connection.url = "jdbc:mysql://localhost:3306/database"
    hibernate.connection.username = "root"
    hibernate.connection.password = "root"
    hibernate.dialect = "org.hibernate.dialect.MySQL5Dialect"
  
  configuration.setProperty("", "");
  ...
  
  // Annotation based Entity classes
  configuration.addAnnotatedClass(...class);
  or
  // Hibernate Mapping HBM defined using XMLs
  configuration.addResource("Class.hbm.xml");

-------------------------------------

Hibernate ORM
  1. SessionFactory
    . A single thread session, transient Object
    . Requires transaction API for implementing CRUD operations
    
  2. TransactionFactory
    . A threaded Operation, as single unit of work
    . A single session can make multiple transactions
    
    transaction.begin()
    transaction.commit()
    transaction.rollback()
    
  3. ConnectionProvider
  
  a) Session API
  b) Transaction API

-----------------------------------------

How to create A SessionFactory?
  1. StandardServiceRegistryBuilder -------> ServiceRegistry ----------------------->
                                                                                      |-----> SessionFactory  
  2. Load Hibernate Configuration (hibernate.cfg.xml) ------> Configuration --------->
  

Configuration configuration = new Configuration().configure();
ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
                                                    .applySettings(configuration.getProperties())
                                                    .buildServiceRegistry();
SessionFactoty sessionFactory = configuration.buildSessionFactory(serviceRegistry);

// Start of persistent context
Session session = sessionFactory.openSession();
Transaction transaction = session.beginTransaction();
try{
...

transaction.commit();
}catch(Exception exception) {
  transaction.rollback();
  
  // End of persistent context
  session.close();
}

-------------------------------------------

Dirty reads
A dirty read (aka uncommitted dependency) occurs when a transaction 
  is allowed to read data from a row that has been modified by another running transaction and not yet committed.

Non-repeatable reads
A non-repeatable read occurs, when during the course of a transaction, 
   a row is retrieved twice and the values within the row differ between reads.

Phantom reads
A phantom read occurs when, in the course of a transaction, 
  new rows are added or removed by another transaction to the records being read.

--------------------------------------------

1. Create - to create a new record in the DB

  a) persist -
            Just saves the Object to the database
            
  b) save - The method is serializable  
            Primary key value is returned

-------------------------------------------

2. Read - to read a record from the database

 a) get - Return is NULL if record not available with PK 
 b) load - finds a proxy instance of Entity class with the given PK
          Serializable operation
          
--------------------------------------------

3. Update - to update a record in the database
          It selects the records and then updates the corresponding record

  a) update - update a record in the database
  b) saveOrUpdate - upsert operation


-------------------------------------------

Entity states -

 1. New state - when an Object has been created with "new"  keyword
    new Object();
 
 2. Persistent State -  When the Object is linked to Database table
    persist(), save()
    get(), load()
    update(), saveAndUpdate()
    
    session.contains(entityInstance); // To check if the Instance is present in persistent state
    
 3. Detached State - if the entity is disconnected from persistent conetext but record is still available in database
   - if using evict(entityInstance)
   - Pesistent context closed using session.close()
   - Persistent context is clearing using clear()
   
 4. Removed state - when an Object is removed from the Persistent Context and from DB as well
  
    - using delete(entityInstance)
 
 
 ---------------------------------------------------
 
 Isolation Levels -
 
 1. Read uncommitted
    This is the lowest isolation level. 
    In this level, dirty reads are allowed, 
    so one transaction may see not-yet-committed changes made by other transactions.
   
 2. Read committed
    In this isolation level, a lock-based concurrency control DBMS implementation keeps write locks 
    (acquired on selected data) until the end of the transaction, but read locks are released
    as soon as the SELECT operation is performed (so the non-repeatable reads phenomenon can occur in this isolation level). 
    As in the previous level, range-locks are not managed.  
   
   
 3. Repeatable reads
      In this isolation level, a lock-based concurrency control DBMS implementation 
      keeps read and write locks (acquired on selected data) 
      until the end of the transaction. However, range-locks are not managed, so phantom reads can occur.  
   
  4. Serializable
      This is the highest isolation level.
      With a lock-based concurrency control DBMS implementation, 
      serializability requires read and write locks (acquired on selected data) 
      to be released at the end of the transaction. Also range-locks must be acquired 
      when a SELECT query uses a ranged WHERE clause, especially to avoid the phantom reads phenomenon.   

   ----------------------------
   
   Query the DB?
   
    1. Retrieve by identifier
      data retrieval can only be done using Primary Key
      - get() or load() method
      
    2. Hibernate Native Query language (SQL Query API)
        Using basic SQL query as a part of Hibernate framework()
        
        SQLQuery queryResult = session.createSQLQuery("...");
        List<Object[]> listOfObjects = queryResult.list();
        
    
    3. Hibernate Query language (Query API)
      Using the hibernate query 
      
      Query query = session.createQuery("...");
      List<Object[]> listOfObjects = query.list();
    
    4. Criteria API


   5. Named Query - when application is using a query repeatedly, 
   @NamedQuery(name ="", query = "")
   The annotation to be used on the entity class, where @Entity annotation is present
   
   @NamedQueries({
    @NamedQuery(...),
    @NamedQuery(...)
   })
   
   //Using named query
   session.getNamedQuery("nameOfQuery");
   
-------------------------------------------------

Aggregate Functions?
  





















   
